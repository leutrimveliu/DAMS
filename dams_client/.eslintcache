[{"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\index.js":"1","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\App.js":"2","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\store.js":"3","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\reportWebVitals.js":"4","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\User\\Register\\Register.jsx":"5","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\User\\Login\\Login.jsx":"6","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\Home\\Home.jsx":"7","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\Footer\\Footer.jsx":"8","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\Header\\Header.jsx":"9","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\Products\\EditProduct\\EditProduct.jsx":"10","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\Products\\CreateProduct\\CreateProduct.jsx":"11","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\reducers\\index.js":"12","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\api\\register.js":"13","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\api\\products.js":"14","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\actions\\auth.js":"15","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\Products\\GetProducts\\GetProducts.jsx":"16","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\reducers\\auth.js":"17","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\reducers\\message.js":"18","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\actions\\types.js":"19","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\api\\login.js":"20","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\index.js":"21","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\store.js":"22","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\App.js":"23","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\reportWebVitals.js":"24","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Header\\Header.jsx":"25","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Home\\Home.jsx":"26","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\User\\Register\\Register.jsx":"27","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\User\\Login\\Login.jsx":"28","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Footer\\Footer.jsx":"29","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\reducers\\index.js":"30","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\actions\\auth.js":"31","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\api\\register.js":"32","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\reducers\\message.js":"33","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\reducers\\auth.js":"34","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\api\\login.js":"35","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\actions\\types.js":"36","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Assets\\AddAsset\\AddAsset.jsx":"37","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\api\\assets.js":"38","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Assets\\GetAssets\\GetAssets.jsx":"39","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\api\\editAsset.js":"40","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\MangerDashboard\\ManagerDashboard.jsx":"41","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\MangerDashboard\\listItems.jsx":"42","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\AdminDashboard.jsx":"43","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\listItems.jsx":"44","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\Tables\\AdminTable.jsx":"45","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\Tables\\UserTable.jsx":"46","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\api\\role.js":"47","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\Tables\\ManagerTable.jsx":"48","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\Tables\\AdminEditProfile.jsx":"49","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\EditProfile\\EditProfile.jsx":"50","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\MangerDashboard\\Tables\\AssetsTable.jsx":"51","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\MangerDashboard\\Tables\\ManagerEditProfile.jsx":"52","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\MangerDashboard\\Tables\\AddAsset.jsx":"53","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\Tables\\AssetsTable.jsx":"54","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Assets\\GetAllAssets\\GetAssets.jsx":"55","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\MangerDashboard\\Tables\\EditAsset.jsx":"56","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\Tables\\EditAsset.jsx":"57","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Assets\\EditAsset\\ManagerEditAsset.jsx":"58","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Assets\\EditAsset\\AdminEditAsset.jsx":"59","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\MangerDashboard\\Tables\\AllAssetsTable.jsx":"60","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\index.js":"61","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\store.js":"62","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\reportWebVitals.js":"63","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\App.js":"64","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\Tables\\AdminEditProfile.jsx":"65","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Footer\\Footer.jsx":"66","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\Tables\\EditAsset.jsx":"67","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Home\\Home.jsx":"68","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\AdminDashboard.jsx":"69","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\MangerDashboard\\ManagerDashboard.jsx":"70","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\Tables\\ManagerTable.jsx":"71","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\Tables\\UserTable.jsx":"72","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\MangerDashboard\\Tables\\ManagerEditProfile.jsx":"73","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\MangerDashboard\\Tables\\AddAsset.jsx":"74","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Header\\Header.jsx":"75","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\MangerDashboard\\Tables\\EditAsset.jsx":"76","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\User\\Login\\Login.jsx":"77","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\MangerDashboard\\Tables\\AssetsTable.jsx":"78","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\User\\Register\\Register.jsx":"79","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\EditProfile\\EditProfile.jsx":"80","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Assets\\GetAssets\\GetAssets.jsx":"81","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Assets\\EditAsset\\ManagerEditAsset.jsx":"82","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Assets\\EditAsset\\AdminEditAsset.jsx":"83","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\reducers\\index.js":"84","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\api\\assets.js":"85","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\api\\editAsset.js":"86","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\listItems.jsx":"87","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\reducers\\auth.js":"88","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\reducers\\message.js":"89","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\api\\register.js":"90","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\actions\\auth.js":"91","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\actions\\types.js":"92","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\api\\login.js":"93","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\api\\role.js":"94","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\MangerDashboard\\listItems.jsx":"95","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Assets\\AddAsset\\AddAsset.jsx":"96","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\MangerDashboard\\Tables\\AllAssetsTable.jsx":"97","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\Tables\\AdminTable.jsx":"98","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\Tables\\AssetsTable.jsx":"99","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\api\\filter.js":"100","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\Tables\\CategoryTable.jsx":"101","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Charts\\testChart.jsx":"102","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Charts\\TestChart.jsx":"103","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Charts\\Testing.jsx":"104"},{"size":707,"mtime":1631115961892,"results":"105","hashOfConfig":"106"},{"size":1068,"mtime":1631115961860,"results":"107","hashOfConfig":"106"},{"size":315,"mtime":1631115961897,"results":"108","hashOfConfig":"106"},{"size":375,"mtime":1631115961896,"results":"109","hashOfConfig":"106"},{"size":8783,"mtime":1631115961890,"results":"110","hashOfConfig":"106"},{"size":5880,"mtime":1631115961889,"results":"111","hashOfConfig":"106"},{"size":253,"mtime":1631115961882,"results":"112","hashOfConfig":"106"},{"size":1476,"mtime":1631115961875,"results":"113","hashOfConfig":"106"},{"size":6770,"mtime":1631115961878,"results":"114","hashOfConfig":"106"},{"size":6479,"mtime":1631115961885,"results":"115","hashOfConfig":"106"},{"size":5932,"mtime":1631115961884,"results":"116","hashOfConfig":"106"},{"size":166,"mtime":1631115961894,"results":"117","hashOfConfig":"106"},{"size":326,"mtime":1631115961871,"results":"118","hashOfConfig":"106"},{"size":1442,"mtime":1631115961870,"results":"119","hashOfConfig":"106"},{"size":1104,"mtime":1631115961864,"results":"120","hashOfConfig":"106"},{"size":13426,"mtime":1631115961887,"results":"121","hashOfConfig":"106"},{"size":756,"mtime":1631115961893,"results":"122","hashOfConfig":"106"},{"size":372,"mtime":1631115961895,"results":"123","hashOfConfig":"106"},{"size":213,"mtime":1631115961867,"results":"124","hashOfConfig":"106"},{"size":603,"mtime":1631115961868,"results":"125","hashOfConfig":"106"},{"size":683,"mtime":1631119037000,"results":"126","hashOfConfig":"127"},{"size":304,"mtime":1631119037000,"results":"128","hashOfConfig":"127"},{"size":3079,"mtime":1637172639204,"results":"129","hashOfConfig":"127"},{"size":362,"mtime":1631119037000,"results":"130","hashOfConfig":"127"},{"size":6496,"mtime":1635584460162,"results":"131","hashOfConfig":"127"},{"size":671,"mtime":1637172385038,"results":"132","hashOfConfig":"127"},{"size":8500,"mtime":1637157527644,"results":"133","hashOfConfig":"127"},{"size":5945,"mtime":1637157092464,"results":"134","hashOfConfig":"127"},{"size":1420,"mtime":1635584608304,"results":"135","hashOfConfig":"127"},{"size":158,"mtime":1631119037000,"results":"136","hashOfConfig":"127"},{"size":1055,"mtime":1631119037000,"results":"137","hashOfConfig":"127"},{"size":1577,"mtime":1635009265203,"results":"138","hashOfConfig":"127"},{"size":354,"mtime":1631119037000,"results":"139","hashOfConfig":"127"},{"size":718,"mtime":1631119037000,"results":"140","hashOfConfig":"127"},{"size":575,"mtime":1631119037000,"results":"141","hashOfConfig":"127"},{"size":207,"mtime":1631119037000,"results":"142","hashOfConfig":"127"},{"size":13035,"mtime":1637170853364,"results":"143","hashOfConfig":"127"},{"size":634,"mtime":1637100810306,"results":"144","hashOfConfig":"127"},{"size":13196,"mtime":1637172103799,"results":"145","hashOfConfig":"127"},{"size":1155,"mtime":1635606592441,"results":"146","hashOfConfig":"127"},{"size":6618,"mtime":1637165318385,"results":"147","hashOfConfig":"127"},{"size":3064,"mtime":1637170194939,"results":"148","hashOfConfig":"127"},{"size":6502,"mtime":1635600520252,"results":"149","hashOfConfig":"127"},{"size":3806,"mtime":1635600519181,"results":"150","hashOfConfig":"127"},{"size":11817,"mtime":1637167472499,"results":"151","hashOfConfig":"127"},{"size":14857,"mtime":1634999853351,"results":"152","hashOfConfig":"127"},{"size":311,"mtime":1633793658264,"results":"153","hashOfConfig":"127"},{"size":14475,"mtime":1637167183733,"results":"154","hashOfConfig":"127"},{"size":5517,"mtime":1635282323455,"results":"155","hashOfConfig":"127"},{"size":9581,"mtime":1635006347948,"results":"156","hashOfConfig":"127"},{"size":15845,"mtime":1637164975848,"results":"157","hashOfConfig":"127"},{"size":5464,"mtime":1635273574071,"results":"158","hashOfConfig":"127"},{"size":5342,"mtime":1635585638833,"results":"159","hashOfConfig":"127"},{"size":15755,"mtime":1637165411702,"results":"160","hashOfConfig":"127"},{"size":13186,"mtime":1637160308892,"results":"161","hashOfConfig":"127"},{"size":5324,"mtime":1635597700099,"results":"162","hashOfConfig":"127"},{"size":5322,"mtime":1637165902869,"results":"163","hashOfConfig":"127"},{"size":14213,"mtime":1637162199691,"results":"164","hashOfConfig":"127"},{"size":14247,"mtime":1637165793489,"results":"165","hashOfConfig":"127"},{"size":13601,"mtime":1637165344508,"results":"166","hashOfConfig":"127"},{"size":683,"mtime":1631119037000,"results":"167","hashOfConfig":"168"},{"size":304,"mtime":1631119037000,"results":"169","hashOfConfig":"168"},{"size":362,"mtime":1631119037000,"results":"170","hashOfConfig":"168"},{"size":3079,"mtime":1637172639204,"results":"171","hashOfConfig":"168"},{"size":5517,"mtime":1635282323455,"results":"172","hashOfConfig":"168"},{"size":1420,"mtime":1635584608304,"results":"173","hashOfConfig":"168"},{"size":5322,"mtime":1637165902869,"results":"174","hashOfConfig":"168"},{"size":671,"mtime":1637172385038,"results":"175","hashOfConfig":"168"},{"size":6623,"mtime":1638019714234,"results":"176","hashOfConfig":"168"},{"size":6618,"mtime":1637165318385,"results":"177","hashOfConfig":"168"},{"size":14475,"mtime":1637167183733,"results":"178","hashOfConfig":"168"},{"size":14857,"mtime":1634999853351,"results":"179","hashOfConfig":"168"},{"size":5464,"mtime":1635273574071,"results":"180","hashOfConfig":"168"},{"size":5344,"mtime":1638015436010,"results":"181","hashOfConfig":"168"},{"size":6496,"mtime":1635584460162,"results":"182","hashOfConfig":"168"},{"size":5324,"mtime":1635597700099,"results":"183","hashOfConfig":"168"},{"size":5945,"mtime":1637157092464,"results":"184","hashOfConfig":"168"},{"size":16675,"mtime":1638040318812,"results":"185","hashOfConfig":"168"},{"size":8500,"mtime":1637157527644,"results":"186","hashOfConfig":"168"},{"size":9581,"mtime":1635006347948,"results":"187","hashOfConfig":"168"},{"size":14187,"mtime":1638718105166,"results":"188","hashOfConfig":"168"},{"size":17475,"mtime":1638024855354,"results":"189","hashOfConfig":"168"},{"size":17518,"mtime":1638024685190,"results":"190","hashOfConfig":"168"},{"size":158,"mtime":1631119037000,"results":"191","hashOfConfig":"168"},{"size":634,"mtime":1641328288968,"results":"192","hashOfConfig":"168"},{"size":1155,"mtime":1635606592441,"results":"193","hashOfConfig":"168"},{"size":4110,"mtime":1638019760970,"results":"194","hashOfConfig":"168"},{"size":718,"mtime":1631119037000,"results":"195","hashOfConfig":"168"},{"size":354,"mtime":1631119037000,"results":"196","hashOfConfig":"168"},{"size":1577,"mtime":1635009265203,"results":"197","hashOfConfig":"168"},{"size":1055,"mtime":1631119037000,"results":"198","hashOfConfig":"168"},{"size":207,"mtime":1631119037000,"results":"199","hashOfConfig":"168"},{"size":575,"mtime":1631119037000,"results":"200","hashOfConfig":"168"},{"size":311,"mtime":1633793658264,"results":"201","hashOfConfig":"168"},{"size":3064,"mtime":1637170194939,"results":"202","hashOfConfig":"168"},{"size":16732,"mtime":1638024624984,"results":"203","hashOfConfig":"168"},{"size":14404,"mtime":1638040263854,"results":"204","hashOfConfig":"168"},{"size":11817,"mtime":1637167472499,"results":"205","hashOfConfig":"168"},{"size":19743,"mtime":1641328949527,"results":"206","hashOfConfig":"168"},{"size":1486,"mtime":1638017929323,"results":"207","hashOfConfig":"168"},{"size":13671,"mtime":1638039834405,"results":"208","hashOfConfig":"168"},{"size":2008,"mtime":1641316868943,"results":"209","hashOfConfig":"168"},{"size":1968,"mtime":1641326424135,"results":"210","hashOfConfig":"168"},{"size":4008,"mtime":1641329010662,"results":"211","hashOfConfig":"168"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},"6c42ih",{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"214"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"214"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"214"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"214"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"214"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"214"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"214"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"214"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},"7ngzvm",{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"264"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"264"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"264"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"264"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"264"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"264"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"264"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"264"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"264"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"264"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"264"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"264"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"264"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"264"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"264"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"264"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"264"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"264"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"264"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"353","messages":"354","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"264"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"264"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"264"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"264"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"264"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},"nfjlvr",{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"370"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"370"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"370"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"370"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"370"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"370"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"370"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"370"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"370"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"370"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"370"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"370"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"370"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"370"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"370"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"370"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"370"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"370"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"370"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"370"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"370"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"370"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"370"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"370"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460","usedDeprecatedRules":"370"},{"filePath":"461","messages":"462","errorCount":3,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"463","messages":"464","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"465","messages":"466","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\index.js",[],["467","468"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\App.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\store.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\reportWebVitals.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\User\\Register\\Register.jsx",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\User\\Login\\Login.jsx",["469"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport { login } from \"../../../actions/auth\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Switch } from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"StarLabs Task \"}\r\n      {new Date().getFullYear()}{\" \"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"100vh\",\r\n  },\r\n  darkTheme: {\r\n    backgroundColor: \"#424242\",\r\n  },\r\n  image: {\r\n    backgroundImage: \"url(https://source.unsplash.com/random)\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundColor:\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[50]\r\n        : theme.palette.grey[900],\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: \"#f48fb1\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function Login() {\r\n  const [email, setEmail] = useState(null);\r\n  const [password, setPassword] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { message } = useSelector((state) => state.message);\r\n  const { user: currentUser, isLoggedIn } = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n\r\n  const [darkState, setDarkState] = useState(false);\r\n  const palletType = darkState ? \"light\" : \"dark\";\r\n  const darkTheme = createMuiTheme({\r\n    palette: {\r\n      type: palletType,\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n\r\n  const handleThemeChange = () => {\r\n    setDarkState(!darkState);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n\r\n    dispatch(login(email, password))\r\n      .then(() => {})\r\n      .catch(() => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n  useEffect(() => {}, [currentUser]);\r\n\r\n  if (currentUser) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n      <Grid container component=\"main\" className={classes.root}>\r\n        <CssBaseline />\r\n        <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n          <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Sign in\r\n            </Typography>\r\n            <br />\r\n\r\n            {message && <Alert severity=\"error\">{message}</Alert>}\r\n            <form className={classes.form} onSubmit={handleSubmit} noValidate>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n                disabled={loading}\r\n              >\r\n                {loading && (\r\n                  <span className=\"spinner-border spinner-border-sm\"></span>\r\n                )}\r\n                <span>Login</span>\r\n              </Button>\r\n              <Grid container>\r\n                <Grid item xs>\r\n                  <Switch checked={darkState} onChange={handleThemeChange} />\r\n                </Grid>\r\n                <Grid item>\r\n                  {darkState ? (\r\n                    <Link\r\n                      to=\"/register\"\r\n                      style={{ color: \"#222\" }}\r\n                      variant=\"body2\"\r\n                    >\r\n                      {\"Don't have an account? Sign Up\"}\r\n                    </Link>\r\n                  ) : (\r\n                    <Link\r\n                      to=\"/register\"\r\n                      style={{ color: \"#fff\" }}\r\n                      variant=\"body2\"\r\n                    >\r\n                      {\"Don't have an account? Sign Up\"}\r\n                    </Link>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n              <Box mt={5}>\r\n                <Copyright />\r\n              </Box>\r\n            </form>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\Home\\Home.jsx",["470"],"import React from \"react\";\r\nimport { getProducts } from \"../../api/products\";\r\nimport GetProduct from \"../Products/GetProducts/GetProducts\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <GetProduct />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\Footer\\Footer.jsx",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\Header\\Header.jsx",["471","472","473"],"import React, { useState, useEffect } from \"react\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logout } from \"../../actions/auth\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  makeStyles,\r\n  IconButton,\r\n  Drawer,\r\n  useScrollTrigger,\r\n  Slide,\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nimport { fade } from \"@material-ui/core/styles\";\r\n\r\nimport \"./Header.scss\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaper-root\": {\r\n      backgroundColor: \"#333\",\r\n    },\r\n  },\r\n  header: {\r\n    marginBottom: \"30px\",\r\n    backgroundColor: \"#444\",\r\n    padding: \"5px 25px\",\r\n  },\r\n  logo: {\r\n    fontFamily: \"Work Sans, sans-serif\",\r\n    fontWeight: 600,\r\n    color: \"#FFFEFE\",\r\n    textAlign: \"left\",\r\n  },\r\n  menuButton: {\r\n    fontFamily: \"Open Sans, sans-serif\",\r\n    fontWeight: 700,\r\n    size: \"18px\",\r\n    marginLeft: \"38px\",\r\n  },\r\n  toolbar: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  drawerContainer: {\r\n    fontWeight: \"bold\",\r\n    padding: \"20px 30px\",\r\n  },\r\n  search: {\r\n    position: \"relative\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    \"&:hover\": {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: \"auto\",\r\n    },\r\n  },\r\n  searchIcon: {\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    color: \"white\",\r\n  },\r\n  IconSearch: {\r\n    color: \"white\",\r\n    maxHeight: \"36px\",\r\n    maxWidth: \"36px\",\r\n  },\r\n  inputRoot: {\r\n    color: \"inherit\",\r\n  },\r\n  inputInput: {\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      width: \"20ch\",\r\n    },\r\n    minWidth: \"220px\",\r\n    paddingLeft: \"12px\",\r\n  },\r\n}));\r\n\r\nfunction HideOnScroll(props) {\r\n  const { children, window } = props;\r\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\r\n\r\n  return (\r\n    <Slide appear={false} direction=\"down\" in={!trigger}>\r\n      {children}\r\n    </Slide>\r\n  );\r\n}\r\n\r\nHideOnScroll.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n  window: PropTypes.func,\r\n};\r\n\r\nconst Header = ({ user, setUser, props }) => {\r\n  const { root, header, logo, toolbar, drawerContainer } = useStyles();\r\n\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n\r\n  const classes = useStyles();\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const [state, setState] = useState({\r\n    mobileView: false,\r\n    drawerOpen: false,\r\n  });\r\n  const { mobileView, drawerOpen } = state;\r\n\r\n  useEffect(() => {\r\n    const setResponsiveness = () => {\r\n      return window.innerWidth < 1200\r\n        ? setState((prevState) => ({ ...prevState, mobileView: true }))\r\n        : setState((prevState) => ({ ...prevState, mobileView: false }));\r\n    };\r\n\r\n    setResponsiveness();\r\n\r\n    window.addEventListener(\"resize\", () => setResponsiveness());\r\n  }, [currentUser]);\r\n\r\n  const logOut = () => {\r\n    dispatch(logout());\r\n  };\r\n\r\n  const displayDesktop = () => {\r\n    return (\r\n      <Toolbar className={toolbar}>\r\n        <NavLink to=\"/\" className=\"header__logo\">\r\n          <Typography variant=\"h6\" component=\"h1\" className={logo}>\r\n            StarLabs Task\r\n          </Typography>\r\n        </NavLink>\r\n\r\n        {/* Navigation */}\r\n        <Nav className=\"header__links\">\r\n          <NavLink to=\"/\" className=\"header__option\">\r\n            Products\r\n          </NavLink>\r\n\r\n          {currentUser ? (\r\n            <>\r\n              <NavLink to=\"/createproduct\" className=\"header__option\">\r\n                Create Product\r\n              </NavLink>\r\n              <NavLink to=\"/login\" className=\"header__option\" onClick={logOut}>\r\n                Log Out\r\n              </NavLink>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <NavLink to={\"/login\"} className=\"logged__out\">\r\n                Log In\r\n              </NavLink>\r\n\r\n              <NavLink to={\"/register\"} className=\"logged__out--signup\">\r\n                Sign Up\r\n              </NavLink>\r\n            </>\r\n          )}\r\n        </Nav>\r\n      </Toolbar>\r\n    );\r\n  };\r\n\r\n  const displayMobile = () => {\r\n    const handleDrawerOpen = () =>\r\n      setState((prevState) => ({ ...prevState, drawerOpen: true }));\r\n    const handleDrawerClose = () =>\r\n      setState((prevState) => ({ ...prevState, drawerOpen: false }));\r\n\r\n    return (\r\n      <Toolbar className=\"mobile__responsive\">\r\n        <NavLink to=\"/\" className=\"header__logo\"></NavLink>\r\n        <IconButton\r\n          {...{\r\n            edge: \"start\",\r\n            color: \"inherit\",\r\n            \"aria-label\": \"menu\",\r\n            \"aria-haspopup\": \"true\",\r\n            onClick: handleDrawerOpen,\r\n          }}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n\r\n        <Drawer\r\n          {...{\r\n            anchor: \"left\",\r\n            open: drawerOpen,\r\n            onClose: handleDrawerClose,\r\n          }}\r\n          className={root}\r\n        >\r\n          <div className={drawerContainer}>{getDrawerChoices()}</div>\r\n        </Drawer>\r\n      </Toolbar>\r\n    );\r\n  };\r\n\r\n  const getDrawerChoices = () => {\r\n    return (\r\n      <Nav className=\"nav__mobile\">\r\n        <NavLink to=\"/\" className=\"header__option\">\r\n          Products\r\n        </NavLink>\r\n\r\n        {currentUser ? (\r\n          <>\r\n            <NavLink to=\"/createproduct\" className=\"header__option\">\r\n              Create Product\r\n            </NavLink>\r\n            <NavLink to=\"/login\" className=\"header__option\" onClick={logOut}>\r\n              LogOut\r\n            </NavLink>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <NavLink to={\"/login\"} className=\"header__option\">\r\n              LogIn\r\n            </NavLink>\r\n            <NavLink to=\"/register\" className=\"header__option\">\r\n              SignUp\r\n            </NavLink>\r\n          </>\r\n        )}\r\n      </Nav>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header className=\"main__header\">\r\n        <React.Fragment>\r\n          <HideOnScroll {...props}>\r\n            <AppBar className={header}>\r\n              {mobileView ? displayMobile() : displayDesktop()}\r\n            </AppBar>\r\n          </HideOnScroll>\r\n        </React.Fragment>\r\n      </header>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\Products\\EditProduct\\EditProduct.jsx",["474","475","476","477","478"],"import React, { useState, useEffect } from \"react\";\r\nimport { editProduct, getProduct } from \"../../../api/products\";\r\nimport { useHistory, Link, Redirect, useParams } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n\r\n    margin: \"auto\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nfunction EditProduct() {\r\n  const history = useHistory();\r\n  let { id } = useParams();\r\n  const classes = useStyles();\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const [showEditForm, setShowEditForm] = useState(false);\r\n  const [errMessage, setErrMessage] = useState(false);\r\n  const [productDetails, setProductDetails] = useState({});\r\n  const [successMessage, setSuccessMessage] = useState(false);\r\n  const getProductFields = async () => {\r\n    const response = await getProduct(id);\r\n    setProductDetails((oldDetails) => ({\r\n      ...oldDetails,\r\n      title: response.title,\r\n      price: response.price,\r\n      stock: response.stock,\r\n    }));\r\n    setShowEditForm(true);\r\n  };\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setProductDetails({ ...productDetails, [name]: value });\r\n  };\r\n\r\n  const { register, handleSubmit, errors } = useForm();\r\n  const onSubmit = async (data, e) => {\r\n    const registerData = {\r\n      title: data.title,\r\n      price: data.price,\r\n      stock: data.stock,\r\n      user_id: currentUser.user._id,\r\n    };\r\n    try {\r\n      await editProduct(registerData, id);\r\n      setTimeout(() => {\r\n        history.push(\"/\");\r\n      }, 1000);\r\n    } catch (e) {}\r\n  };\r\n  useEffect(() => {\r\n    getProductFields();\r\n  }, [currentUser]);\r\n  if (!currentUser) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        sm={8}\r\n        md={5}\r\n        component={Paper}\r\n        elevation={6}\r\n        square\r\n        style={{ width: \"100%\", marginBottom: 50, marginTop: 60 }}\r\n      >\r\n        <div className={classes.paper}>\r\n          <Typography\r\n            style={{ marginBottom: 20, marginTop: 20 }}\r\n            component=\"h1\"\r\n            variant=\"h5\"\r\n          >\r\n            Edit Product\r\n          </Typography>\r\n          <br />\r\n          {errMessage && <Alert severity=\"error\">{errMessage}</Alert>}\r\n          {successMessage && <Alert severity=\"success\">{successMessage}</Alert>}\r\n          <br />\r\n          <form className={classes.form} onSubmit={handleSubmit(onSubmit)}>\r\n            <TextField\r\n              name=\"title\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              label=\"Product Title\"\r\n              type=\"text\"\r\n              id=\"title\"\r\n              InputLabelProps={{ shrink: true }}\r\n              value={productDetails.title}\r\n              onChange={handleChange}\r\n              inputRef={register({ required: true, minLength: 3 })}\r\n            />\r\n            <p style={{ color: \"red\" }}>\r\n              &#8203;\r\n              {errors.title && errors.title.type === \"required\" && (\r\n                <span>This field is required!</span>\r\n              )}\r\n              {errors.title && errors.title.type === \"minLength\" && (\r\n                <span>This field requires minimum length of 3 characters!</span>\r\n              )}\r\n            </p>\r\n\r\n            <TextField\r\n              InputLabelProps={{ shrink: true }}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              label=\"Product Price\"\r\n              name=\"price\"\r\n              type=\"decimal\"\r\n              id=\"price\"\r\n              value={productDetails.price}\r\n              onChange={handleChange}\r\n              inputRef={register({ required: true, min: 0.5, max: 1000000 })}\r\n            />\r\n            <p style={{ color: \"red\" }}>\r\n              &#8203;\r\n              {errors.price && errors.price.type === \"required\" && (\r\n                <span>This field is required!</span>\r\n              )}\r\n              {errors.price && errors.price.type === \"min\" && (\r\n                <span>Price must be at least 0.50 cent!</span>\r\n              )}\r\n              {errors.price && errors.price.type === \"max\" && (\r\n                <span>Price must be maximum 1000000!</span>\r\n              )}\r\n            </p>\r\n\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"stock\"\r\n              label=\"Product stock\"\r\n              type=\"number\"\r\n              InputLabelProps={{ shrink: true }}\r\n              id=\"stock\"\r\n              onChange={handleChange}\r\n              value={productDetails.stock}\r\n              inputRef={register({\r\n                min: 1,\r\n                max: 10000,\r\n                required: true,\r\n              })}\r\n            />\r\n            <p style={{ color: \"red\" }}>\r\n              &#8203;\r\n              {errors.stock && errors.stock.type === \"required\" && (\r\n                <span>This field is required!</span>\r\n              )}\r\n              {errors.stock && errors.stock.type === \"min\" && (\r\n                <span>This field requires minimum 1 item in stock!</span>\r\n              )}\r\n              {errors.stock && errors.stock.type === \"max\" && (\r\n                <span>This field requires maximum 10000 item in stock!</span>\r\n              )}\r\n            </p>\r\n\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ marginBottom: \"15px\" }}\r\n              type=\"submit\"\r\n            >\r\n              Edit product\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default EditProduct;\r\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\Products\\CreateProduct\\CreateProduct.jsx",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\reducers\\index.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\api\\register.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\api\\products.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\actions\\auth.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\components\\Products\\GetProducts\\GetProducts.jsx",["479"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { getProducts, deleteProducts } from \"../../../api/products\";\r\nimport { useHistory, Link, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"title\",\r\n    // numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Product Title\",\r\n  },\r\n  {\r\n    id: \"price\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Product Price\",\r\n  },\r\n  {\r\n    id: \"stock\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Product stock\",\r\n  },\r\n  {\r\n    id: \"publishDate\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Publish date\",\r\n  },\r\n\r\n  {\r\n    id: \"edit\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Edit Product\",\r\n  },\r\n  {\r\n    id: \"delete\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Delete Product\",\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"center\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Our Products\r\n        </Typography>\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"auto\",\r\n    width: \"100%\",\r\n    marginTop: 70,\r\n    marginBottom: 50,\r\n    paddingLeft: 50,\r\n    paddingRight: 50,\r\n  },\r\n  paper: { margin: \"auto\", width: \"100%\" },\r\n  table: {\r\n    margin: \"auto\",\r\n    width: \"100%\",\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function CompanyEventsTable() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"name\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [product, setProducts] = React.useState([]);\r\n\r\n  const getProductsList = async () => {\r\n    const response = await getProducts();\r\n    setProducts(response);\r\n  };\r\n  const handleDeleteSubmit = async (id) => {\r\n    const deleteuser = {\r\n      user_id: currentUser.user._id,\r\n    };\r\n    try {\r\n      await deleteProducts(id, deleteuser);\r\n\r\n      setTimeout(() => {\r\n        history.go(\"/\");\r\n      }, 1000);\r\n    } catch (e) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    getProductsList();\r\n  }, []);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, product.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        sm={12}\r\n        md={12}\r\n        component={Paper}\r\n        className={classes.paper}\r\n      >\r\n        <EnhancedTableToolbar numSelected={selected.length} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={product.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(product, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((product, index) => {\r\n                  const isItemSelected = isSelected(product.title);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(e) => handleClick(e, product.title)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={product._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ \"aria-labelledby\": labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                        align=\"left\"\r\n                      >\r\n                        {product.title}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {product.price.toFixed(2)}€{\" \"}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{product.stock}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {product.publishDate.split(\"T\")[0]}\r\n                      </TableCell>\r\n\r\n                      <TableCell align=\"center\">\r\n                        <Link to={`/product/${product._id}`}>\r\n                          <IconButton\r\n                            aria-label=\"center\"\r\n                            className=\"edit_button\"\r\n                          >\r\n                            <EditIcon className=\"edit_icon\" />\r\n                          </IconButton>\r\n                        </Link>\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {currentUser ? (\r\n                          <IconButton\r\n                            onClick={() => {\r\n                              if (window.confirm(\"Delete the event?\")) {\r\n                                handleDeleteSubmit(product._id);\r\n                              }\r\n                            }}\r\n                            className=\"delete_button\"\r\n                            aria-label=\"delete\"\r\n                          >\r\n                            <DeleteIcon className=\"delete_icon\" />\r\n                          </IconButton>\r\n                        ) : (\r\n                          <IconButton\r\n                            onClick={() => {\r\n                              <Redirect to=\"/\" />;\r\n                            }}\r\n                            className=\"delete_button\"\r\n                            aria-label=\"delete\"\r\n                          >\r\n                            <DeleteIcon className=\"delete_icon\" />\r\n                          </IconButton>\r\n                        )}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ emptyRows }}>\r\n                  {/* <TableCell colSpan={6} /> */}\r\n                  <Divider />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10]}\r\n          component=\"div\"\r\n          count={product.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\reducers\\auth.js",["480"],"import {\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n} from \"../actions/types\";\r\n\r\nconst user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\nconst initialState = user\r\n  ? { isLoggedIn: true, user }\r\n  : { isLoggedIn: false, user: null };\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: true,\r\n        user: payload.user,\r\n      };\r\n    case LOGIN_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        user: null,\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        user: null,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\reducers\\message.js",["481"],"import { SET_MESSAGE, CLEAR_MESSAGE } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_MESSAGE:\r\n      return { message: payload };\r\n\r\n    case CLEAR_MESSAGE:\r\n      return { message: \"\" };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\actions\\types.js",[],["482","483"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\ProductTask\\product-task_client\\src\\api\\login.js",["484"],"import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:4000/auth\";\r\n\r\nconst login = async (email, password) => {\r\n  axios.defaults.headers.common[\"Authorization\"] =\r\n    \"Bearer \" + localStorage.getItem(\"user\");\r\n  return axios\r\n    .post(API_URL + \"/login\", {\r\n      email,\r\n      password,\r\n    })\r\n    .then((response) => {\r\n      if (response.data.token) {\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n      }\r\n      return response.data;\r\n    });\r\n};\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem(\"user\");\r\n};\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n};\r\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\index.js",[],["485","486"],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\store.js",[],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\App.js",["487","488","489","490","491"],"import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\nimport Register from \"./components/User/Register/Register\";\nimport Login from \"./components/User/Login/Login\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\nimport AddAsset from \"./components/MangerDashboard/Tables/AddAsset\";\nimport Home from \"./components/Home/Home\";\nimport ManagerDashboard from \"./components/MangerDashboard/ManagerDashboard\";\nimport AdminDashboard from \"./components/AdminDashboard/AdminDashboard\";\nimport AdminEditProfile from \"./components/AdminDashboard/Tables/AdminEditProfile\";\nimport ManagerEditProfile from \"./components/MangerDashboard/Tables/ManagerEditProfile\";\nimport AssetsTable from \"./components/MangerDashboard/Tables/AssetsTable\";\nimport EditAsset from \"./components/Assets/EditAsset/ManagerEditAsset\";\nimport AdminsEditAsset from \"./components/Assets/EditAsset/AdminEditAsset\";\nimport EditProfile from \"./components/EditProfile/EditProfile\";\nimport UserTable from \"./components/AdminDashboard/Tables/UserTable\";\nimport ManagerTable from \"./components/AdminDashboard/Tables/ManagerTable\";\nimport ManagerEditAsset from \"./components/MangerDashboard/Tables/EditAsset\";\nimport AdminEditAsset from \"./components/AdminDashboard/Tables/EditAsset\";\nimport GetAssets from \"./components/Assets/GetAssets/GetAssets\";\n\nfunction App() {\n  const [filterChange, setFilterChange] = useState(null);\n  const filterRequest = (value) => {\n    setFilterChange(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Header />\n        <Switch>\n          <Route path=\"/Register\" component={() => <Register />} />\n          <Route path=\"/login\" component={() => <Login />} />\n          <Route path=\"/manager/addasset\" component={() => <AddAsset />} />\n          <Route path=\"/asset/:id\" component={() => <EditAsset />} />\n          <Route path=\"/admin\" component={() => <AdminDashboard />} />\n          <Route path=\"/admin/users\" component={() => <UserTable />} />\n          <Route path=\"/admin/companies\" component={() => <ManagerTable />} />\n         <Route\n            path=\"/admins/editprofile/:id\"\n            component={() => <AdminEditProfile />}\n          />\n           <Route\n            path=\"/manager/editprofile/:id\"\n            component={() => <ManagerEditProfile />}\n          />\n          <Route\n            path=\"/manager/asset/:id\"\n            component={() => <ManagerEditAsset />}\n          />\n           <Route\n            path=\"/admins/asset/:id\"\n            component={() => <AdminEditAsset />}\n          />\n\n          <Route\n            path=\"/manager/assets\"\n            component={() => <ManagerDashboard />}\n          />\n          <Route path=\"/editprofile/:id\" component={() => <EditProfile />} />\n          <Route path=\"/manager\" component={() => <ManagerDashboard />} />\n          <Route path=\"/\" component={() => <GetAssets />} />\n        </Switch>\n        <Footer />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\reportWebVitals.js",[],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Header\\Header.jsx",["492","493","494"],"import React, { useState, useEffect } from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport { NavLink } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { logout } from \"../../actions/auth\";\nimport PropTypes from \"prop-types\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  makeStyles,\n  IconButton,\n  Drawer,\n  useScrollTrigger,\n  Slide,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nimport { fade } from \"@material-ui/core/styles\";\n\nimport \"./Header.scss\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& .MuiPaper-root\": {\n      backgroundColor: \"#333\",\n    },\n  },\n  header: {\n    marginBottom: \"30px\",\n    backgroundColor: \"#444\",\n    padding: \"5px 25px\",\n  },\n  logo: {\n    fontFamily: \"Work Sans, sans-serif\",\n    fontWeight: 600,\n    color: \"#FFFEFE\",\n    textAlign: \"left\",\n  },\n  menuButton: {\n    fontFamily: \"Open Sans, sans-serif\",\n    fontWeight: 700,\n    size: \"18px\",\n    marginLeft: \"38px\",\n  },\n  toolbar: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  drawerContainer: {\n    fontWeight: \"bold\",\n    padding: \"20px 30px\",\n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(3),\n      width: \"auto\",\n    },\n  },\n  searchIcon: {\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    color: \"white\",\n  },\n  IconSearch: {\n    color: \"white\",\n    maxHeight: \"36px\",\n    maxWidth: \"36px\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n  },\n  inputInput: {\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: \"20ch\",\n    },\n    minWidth: \"220px\",\n    paddingLeft: \"12px\",\n  },\n}));\n\nfunction HideOnScroll(props) {\n  const { children, window } = props;\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\n\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  );\n}\n\nHideOnScroll.propTypes = {\n  children: PropTypes.element.isRequired,\n  window: PropTypes.func,\n};\n\nconst Header = ({ user, setUser, props }) => {\n  const { root, header, logo, toolbar, drawerContainer } = useStyles();\n\n  const { user: currentUser } = useSelector((state) => state.auth);\n  const dispatch = useDispatch();\n\n  const classes = useStyles();\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const [state, setState] = useState({\n    mobileView: false,\n    drawerOpen: false,\n  });\n  const { mobileView, drawerOpen } = state;\n\n  useEffect(() => {\n    const setResponsiveness = () => {\n      return window.innerWidth < 1200\n        ? setState((prevState) => ({ ...prevState, mobileView: true }))\n        : setState((prevState) => ({ ...prevState, mobileView: false }));\n    };\n\n    setResponsiveness();\n\n    window.addEventListener(\"resize\", () => setResponsiveness());\n  }, [currentUser]);\n\n  const logOut = () => {\n    dispatch(logout());\n  };\n\n  const displayDesktop = () => {\n    return (\n      <Toolbar className={toolbar}>\n        <NavLink to=\"/\" className=\"header__logo\">\n          <Typography variant=\"h6\" component=\"h1\" className={logo}>\n           DAMS\n          </Typography>\n        </NavLink>\n\n        {/* Navigation */}\n        <Nav className=\"header__links\">\n          {/* <NavLink to=\"/\" className=\"header__option\">\n            Assets\n          </NavLink> */}\n\n          {currentUser ? (\n            <>\n              {/* <NavLink to=\"/addasset\" className=\"header__option\">\n                Add an Asset\n              </NavLink> */}\n              <NavLink to=\"/login\" className=\"header__option\" onClick={logOut}>\n                Log Out\n              </NavLink>\n            </>\n          ) : (\n            <>\n              <NavLink to={\"/login\"} className=\"logged__out\">\n                Log In\n              </NavLink>\n\n              <NavLink to={\"/register\"} className=\"logged__out--signup\">\n                Sign Up\n              </NavLink>\n            </>\n          )}\n        </Nav>\n      </Toolbar>\n    );\n  };\n\n  const displayMobile = () => {\n    const handleDrawerOpen = () =>\n      setState((prevState) => ({ ...prevState, drawerOpen: true }));\n    const handleDrawerClose = () =>\n      setState((prevState) => ({ ...prevState, drawerOpen: false }));\n\n    return (\n      <Toolbar className=\"mobile__responsive\">\n        <NavLink to=\"/\" className=\"header__logo\"></NavLink>\n        <IconButton\n          {...{\n            edge: \"start\",\n            color: \"inherit\",\n            \"aria-label\": \"menu\",\n            \"aria-haspopup\": \"true\",\n            onClick: handleDrawerOpen,\n          }}\n        >\n          <MenuIcon />\n        </IconButton>\n\n        <Drawer\n          {...{\n            anchor: \"left\",\n            open: drawerOpen,\n            onClose: handleDrawerClose,\n          }}\n          className={root}\n        >\n          <div className={drawerContainer}>{getDrawerChoices()}</div>\n        </Drawer>\n      </Toolbar>\n    );\n  };\n\n  const getDrawerChoices = () => {\n    return (\n      <Nav className=\"nav__mobile\">\n        <NavLink to=\"/\" className=\"header__option\">\n          Products\n        </NavLink>\n\n        {currentUser ? (\n          <>\n            <NavLink to=\"/addasset\" className=\"header__option\">\n              Create Product\n            </NavLink>\n            <NavLink to=\"/login\" className=\"header__option\" onClick={logOut}>\n              LogOut\n            </NavLink>\n          </>\n        ) : (\n          <>\n            <NavLink to={\"/login\"} className=\"header__option\">\n              LogIn\n            </NavLink>\n            <NavLink to=\"/register\" className=\"header__option\">\n              SignUp\n            </NavLink>\n          </>\n        )}\n      </Nav>\n    );\n  };\n\n  return (\n    <>\n      <header className=\"main__header\">\n        <React.Fragment>\n          <HideOnScroll {...props}>\n            <AppBar className={header}>\n              {mobileView ? displayMobile() : displayDesktop()}\n            </AppBar>\n          </HideOnScroll>\n        </React.Fragment>\n      </header>\n    </>\n  );\n};\n\nexport default Header;\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Home\\Home.jsx",[],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\User\\Register\\Register.jsx",[],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\User\\Login\\Login.jsx",[],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Footer\\Footer.jsx",[],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\reducers\\index.js",[],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\actions\\auth.js",[],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\api\\register.js",[],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\reducers\\message.js",["495"],"import { SET_MESSAGE, CLEAR_MESSAGE } from \"../actions/types\";\n\nconst initialState = {};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case SET_MESSAGE:\n      return { message: payload };\n\n    case CLEAR_MESSAGE:\n      return { message: \"\" };\n\n    default:\n      return state;\n  }\n}\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\reducers\\auth.js",["496"],"import {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n} from \"../actions/types\";\n\nconst user = JSON.parse(localStorage.getItem(\"user\"));\n\nconst initialState = user\n  ? { isLoggedIn: true, user }\n  : { isLoggedIn: false, user: null };\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        isLoggedIn: true,\n        user: payload.user,\n      };\n    case LOGIN_FAIL:\n      return {\n        ...state,\n        isLoggedIn: false,\n        user: null,\n      };\n    case LOGOUT:\n      return {\n        ...state,\n        isLoggedIn: false,\n        user: null,\n      };\n    default:\n      return state;\n  }\n}\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\api\\login.js",["497"],"import axios from \"axios\";\n\nconst API_URL = \"http://localhost:4000/auth\";\n\nconst login = async (email, password) => {\n  axios.defaults.headers.common[\"Authorization\"] =\n    \"Bearer \" + localStorage.getItem(\"user\");\n  return axios\n    .post(API_URL + \"/login\", {\n      email,\n      password,\n    })\n    .then((response) => {\n      if (response.data.token) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n      return response.data;\n    });\n};\n\nconst logout = () => {\n  localStorage.removeItem(\"user\");\n};\n\nexport default {\n  login,\n  logout,\n};\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\actions\\types.js",[],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Assets\\AddAsset\\AddAsset.jsx",["498","499","500","501","502","503"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\nimport { addAsset } from \"../../../api/assets\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { format } from \"date-fns\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useSelector } from \"react-redux\";\nimport \"./AddAsset.scss\";\n\nfunction AddAsset() {\n  const history = useHistory();\n  const { user: currentUser } = useSelector((state) => state.auth);\n  const [errMessage, setErrMessage] = useState(false);\n  const [successMessage, setSuccessMessage] = useState(false);\n\n  const { register, handleSubmit, errors } = useForm();\n  const onSubmit = async (data, e) => {\n    const registerData = {\n      // assetNr: data.assetNr,\n      // assetOldNr: data.assetOldNr,\n      assetCategory: data.assetCategory,\n      assetDescription: data.assetDescription,\n      assetModel: data.assetModel,\n      assetSerialNo: data.assetSerialNo,\n      assetSupplier: data.assetSupplier,\n      price: data.price,\n      deliveryDate: data.deliveryDate,\n      donorName: data.donorName,\n      projectName: data.projectName,\n      assetLocation: data.assetLocation,\n      roomNo: data.roomNo,\n      assetHolder: data.assetHolder,\n      user_id: currentUser.user._id,\n    };\n    \n    try {\n      const response = await addAsset(registerData);\n      console.log(\"Form has been submitted\");\n      setErrMessage(response.errMessage);\n      setSuccessMessage(response.successMessage);\n      e.target.reset();\n      setTimeout(() => {\n        history.push(\"/manager\");\n      }, 2000);\n    } catch (e) { console.log(\"Form has not been submitted\");}\n  };\n  useEffect(() => {}, [currentUser]);\n  if (!currentUser) {\n    return <Redirect to={\"/\"} />;\n  }\n  const todayDate = format(new Date(), \"yyyy-MM-dd\");\n  return (\n    <>\n      {/* <CompanyDashboard /> */}\n      <div className=\"create__event \">\n        <div className=\"event__container\">\n          <h1>Add an Asset</h1>\n        </div>\n        <div className=\"event__container\">\n          {errMessage && <Alert severity=\"error\">{errMessage}</Alert>}\n          {successMessage && <Alert severity=\"success\">{successMessage}</Alert>}\n        </div>\n        <div className=\"event__container\">\n          <Form\n            className=\"event__form col-md-10\"\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <Row>\n              <Col className=\"col-12 col-md-6\">\n                <Form.Group controlId=\"assetCategory\">\n                  <Form.Label>Asset Category</Form.Label>\n                  <Form.Control\n                    name=\"assetCategory\"\n                    type=\"text\"\n                    id=\"assetCategory\"\n                    placeholder=\"Asset Category...\"\n                    ref={register({ required: true,      \n                    })}\n                  />\n                    \n               \n                    <p style={{ color: \"rdelied\" }}>\n                      &#8203;\n                      {errors.assetCategory && errors.assetCategory.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n\n                <Form.Group controlId=\"assetDescription\">\n                  <Form.Label>Asset Description</Form.Label>\n                  <Form.Control\n                    as=\"textarea\"\n                    rows={1}\n                    id=\"assetDescription\"\n                    name=\"assetDescription\"\n                    placeholder=\"Asset Description...\"\n                    ref={register({\n                      required: true,\n                      minLength: 5,\n                      maxLength: 1200,\n                    })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"minLength\" && (\n                        <span>\n                          This field requires minimum length of 5 characters!\n                        </span>\n                      )}\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"maxLength\" && (\n                        <span>\n                          This field has limit of maximum of 1200 characters!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n              \n              <Form.Group controlId=\"assetModel\">\n                  <Form.Label>Asset Model</Form.Label>\n                  <Form.Control\n                    name=\"assetModel\"\n                    id=\"assetModel\"\n                    type=\"text\"\n                    placeholder=\"Asset Model...\"\n                    ref={register({ required: true, minLength: 3 })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetModel &&\n                      errors.assetModel.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n                </Form.Group>\n\n                <Form.Group controlId=\"assetSerialNo\">\n                  <Form.Label>Asset Serial No.</Form.Label>\n                  <Form.Control\n                    name=\"assetSerialNo\"\n                    id=\"assetSerialNo\"\n                    placeholder=\"Asset Serial No....\"\n                    type=\"text\"\n                    ref={register({ required: true, minLength: 3 })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.assetSerialNo && errors.assetSerialNo.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n\n                <Form.Group controlId=\"assetSupplier\">\n                  <Form.Label>Asset Supplier</Form.Label>\n                  <Form.Control\n                    name=\"assetSupplier\"\n                    id=\"assetSupplier\"\n                    type=\"text\"\n                    placeholder=\"Asset Supplier...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetSupplier &&\n                      errors.assetSupplier.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n                </Form.Group>\n                \n                <Form.Group controlId=\"price\">\n                  <Form.Label>Asset Price</Form.Label>\n                  <Form.Control\n                  id=\"price\"\n                    name=\"price\"\n                    placeholder=\"Asset Price...\"\n                    type=\"number\"\n                    ref={register({ required: true,      \n               \n                        pattern: {\n                          value: /^[0-9]+$/,\n                          message: \"Only Numbers\",\n                        }, })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.price && errors.price.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                </Col>\n              <Col className=\"col-12 col-md-6\">\n\n                <Form.Group controlId=\"deliveryDate\">\n                  <Form.Label>Delivery Date</Form.Label>\n                  <Form.Control\n                    name=\"deliveryDate\"\n                    type=\"date\"\n                    id=\"deliveryDate\"\n                    id=\"deliveryDate\"\n                    ref={register({\n                      required: true,\n                      validate: (value) => value <= todayDate,\n                    })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.deliveryDate &&\n                      errors.deliveryDate.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    {errors.deliveryDate &&\n                      errors.deliveryDate.type === \"validate\" && (\n                        <span>\n                          Starting date cant be earlier than tomorrow!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n                \n                <Form.Group controlId=\"donorName\">\n                <Form.Label >Donor Name</Form.Label>\n                  <Form.Control\n                    name=\"donorName\"\n                    type=\"text\"\n                    id=\"donorName\"\n                    placeholder=\"Donor name...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.donorName &&\n                      errors.donorName.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"projectName\">\n                <Form.Label >Project Name</Form.Label>\n                  <Form.Control\n                    name=\"projectName\"\n                    id=\"projectName\"\n                    type=\"text\"\n                    placeholder=\"Project name...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.projectName &&\n                      errors.projectName.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"assetLocation\">\n                <Form.Label >Asset Location</Form.Label>\n                  <Form.Control\n                    name=\"assetLocation\"\n                    id=\"assetLocation\"\n                    type=\"text\"\n                    placeholder=\"Asset Location...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetLocation &&\n                      errors.assetLocation.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"roomNo\">\n                  <Form.Label>Room No.</Form.Label>\n                  <Form.Control\n                    name=\"roomNo\"\n                    id=\"roomNo\"\n                    placeholder=\"Room No...\"\n                    type=\"text\"\n                    ref={register({ required: true, minLength: 1 })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.roomNo && errors.roomNo.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetHolder\">\n                <Form.Label >Asset Holder</Form.Label>\n                  <Form.Control\n                    name=\"assetHolder\"\n                    id=\"assetHolder\"\n                    type=\"text\"\n                    placeholder=\"Asset Holder...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetHolder &&\n                      errors.assetHolder.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n              </Col>\n\n              <Col className=\"col-12 col-md-6\">\n                <Button\n                  className=\"create__form--submit btn-lg font-weight-bold\" \n                  variant=\"primary\"\n                  type=\"submit\"\n                >\n                  Add\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AddAsset;\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\api\\assets.js",[],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Assets\\GetAssets\\GetAssets.jsx",["504","505","506","507","508","509","510","511","512","513"],"import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n import { getAssets } from \"../../../api/assets\";\n\nimport {  deleteAsset, getManagerAssets } from \"../../../api/editAsset\";\nimport { useHistory, Link, Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  {\n    id: \"assetNr\",\n    // numeric: \"right\",\n    disablePadding: false,\n    label: \"No.\",\n  },\n  {\n    id: \"assetCategory\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Category\",\n  },\n  {\n    id: \"assetDescription\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Description\",\n  },\n  {\n    id: \"assetModel\",\n     numeric: \"left\",\n    disablePadding: false,\n    label: \"Model\",\n  },\n  {\n    id: \"assetSerialNo\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Serial no.\",\n  },\n  {\n    id: \"assetSupplier\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Supplier\",\n  },\n  {\n    id: \"price\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Price\",\n  }, \n  {\n    id: \"deliveryDate\",\n     numeric: \"left\",\n    disablePadding: false,\n    label: \"Delivery date\",\n  },\n  {\n    id: \"publishDate\",\n     numeric: \"left\",\n    disablePadding: false,\n    label: \"Publish date\",\n  },\n  \n  {\n    id: \"donorName\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Donor\",\n  },\n  {\n    id: \"projectName\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Project Name\",\n  },\n  {\n    id: \"assetLocation\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Location\",\n  },\n  {\n    id: \"roomNo\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Room no.\",\n  },\n  {\n    id: \"assetHolder\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Holder\",\n  },\n];\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? \"center\" : \"left\"}\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === \"light\"\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: \"1 1 100%\",\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          className={classes.title}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography\n          className={classes.title}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          Digital Assets\n        </Typography>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: \"auto\",\n    width: \"100%\",\n    marginTop: 70,\n    marginBottom: 50,\n    paddingLeft: 50,\n    paddingRight: 50,\n  },\n  paper: { margin: \"auto\", width: \"100%\" },\n  table: {\n    margin: \"auto\",\n    width: \"100%\",\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nexport default function GetAssets() {\n  const classes = useStyles();\n  const history = useHistory();\n  const { user: currentUser } = useSelector((state) => state.auth);\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"name\");\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [asset, setAssets] = React.useState([]);\n\n  const getAssetsList = async () => {\n    const response = await getAssets();\n    setAssets(response);\n  };\n  // const handleDeleteSubmit = async (id) => {\n  //   const deleteuser = {\n  //     user_id: currentUser.user._id,\n  //   };\n  //   try {\n  //     await deleteAsset(id, deleteuser);\n\n  //     setTimeout(() => {\n  //       history.go(\"/\");\n  //     }, 1000);\n  //   } catch (e) {}\n  // };\n\n  useEffect(() => {\n    getAssetsList();\n  }, []);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleClick = (event, name) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const isSelected = (name) => selected.indexOf(name) !== -1;\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, asset.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Grid\n        item\n        xs={12}\n        sm={12}\n        md={12}\n        component={Paper}\n        className={classes.paper}\n      >\n        <EnhancedTableToolbar numSelected={selected.length} />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size=\"medium\"\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n              rowCount={asset.length}\n            />\n            <TableBody>\n              {stableSort(asset, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((asset, index) => {\n                  const isItemSelected = isSelected(asset.title);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(e) => handleClick(e, asset.title)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={asset._id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isItemSelected}\n                          inputProps={{ \"aria-labelledby\": labelId }}\n                        />\n                      </TableCell>\n                      <TableCell\n                        component=\"th\"\n                        id={labelId}\n                        scope=\"row\"\n                        padding=\"none\"\n                        align=\"left\"\n                      >\n                        {asset.assetNr}\n                      </TableCell>\n                      <TableCell align=\"center\">{asset.assetCategory}</TableCell>\n                      <TableCell align=\"center\">{asset.assetDescription}</TableCell>\n                      <TableCell align=\"center\">{asset.assetModel}</TableCell>\n                      <TableCell align=\"center\">{asset.assetSerialNo}</TableCell>\n                      <TableCell align=\"center\">{asset.assetSupplier}</TableCell>\n                      <TableCell align=\"center\">\n                        {asset.price.toFixed(2)}€{\" \"}\n                       </TableCell>\n                      <TableCell align=\"center\">\n                        {asset.deliveryDate.split(\"T\")[0]}\n                        </TableCell>\n                      <TableCell align=\"center\">\n                        {asset.publishDate.split(\"T\")[0]}\n                      </TableCell>\n                      <TableCell align=\"center\">{asset.donorName}</TableCell>\n                      <TableCell align=\"center\">{asset.projectName}</TableCell>\n                      <TableCell align=\"center\">{asset.assetLocation}</TableCell>\n                      <TableCell align=\"center\">{asset.roomNo}</TableCell>\n                      <TableCell align=\"center\">{asset.assetHolder}</TableCell>\n\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ emptyRows }}>\n                  {/* <TableCell colSpan={6} /> */}\n                  <Divider />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10]}\n          component=\"div\"\n          count={asset.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Grid>\n    </div>\n  );\n}\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\api\\editAsset.js",[],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\MangerDashboard\\ManagerDashboard.jsx",["514"],"import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, Redirect } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport MainListItems from \"./listItems\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport AssetsAllTable from \"./Tables/AllAssetsTable\";\r\nimport AssetsTable from \"./Tables/AssetsTable\";\r\n// import CurrentRequests from \"./Tables/CurrentRequests\";\r\n// import ApprovedRequests from \"./Tables/ApprovedRequests\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n// css\r\nimport \"./Dashboard.scss\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24,\r\n    backgroundColor: \"#333\",\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  // appBarShift: {\r\n  //   marginLeft: drawerWidth,\r\n  //   width: `calc(100% - ${drawerWidth}px)`,\r\n  //   transition: theme.transitions.create([\"width\", \"margin\"], {\r\n  //     easing: theme.transitions.easing.sharp,\r\n  //     duration: theme.transitions.duration.enteringScreen,\r\n  //   }),\r\n  // },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    backgroundColor: \"#333\",\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    minHeight: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function ManagerDashboard() {\r\n  const [companyDash, setCompanyDash] = useState(false);\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    if (open) {\r\n      setOpen(false);\r\n    } else {\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  const location = useLocation();\r\n\r\n  function renderSwitch(param) {\r\n    // function renderSwitch(param, query) {\r\n    switch (param) {\r\n      case \"/manager\":\r\n        return <AssetsAllTable />;\r\n      case \"/manager/assets\":\r\n        return <AssetsTable />;\r\n      // case \"/company/currentRequests\":\r\n      //   return <CurrentRequests />;\r\n      // case \"/company/approvedRequests\":\r\n      //   return <ApprovedRequests />;\r\n      \r\n\r\n      default:\r\n        console.log(\"Wrong path\");\r\n    }\r\n  }\r\n  \r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      // setCreateEvent(currentUser.role.includes(\"user\"));\r\n      setCompanyDash(\r\n        currentUser.role.includes(\"admin\") || currentUser.role.includes(\"user\")\r\n      );\r\n    }\r\n  }, [currentUser]);\r\n\r\n  // if (!localStorage.getItem(\"token\")) {\r\n  //   return <Redirect to={\"/\"} />;\r\n  // }\r\n  if (companyDash || !currentUser) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"absolute\"\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            className={classes.title}\r\n            color=\"inherit\"\r\n            noWrap\r\n          >\r\n            <NavLink to=\"/manager\" className=\"dashboard__link\">\r\n              DAMS Manager Dashboard\r\n            </NavLink>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <List style={{ marginTop: \"20px\" }}>\r\n          {\" \"}\r\n          <MainListItems />\r\n        </List>\r\n        <Divider />\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* Chart */}\r\n            {/* <Grid item xs={12} md={8} lg={12}>\r\n              <Paper className={fixedHeightPaper}>{/* <Chart /> */}\r\n\r\n            {/* Recent Deposits */}\r\n            {/* <Grid item xs={12} md={4} lg={3}>\r\n              <Paper className={fixedHeightPaper}>\r\n                <Deposits />\r\n              </Paper>\r\n            </Grid> */}\r\n            {/* Recent Orders */}\r\n            <Grid item xs={12}>\r\n              <Paper className={classes.paper}>\r\n                {renderSwitch(location.pathname, location.search)}\r\n                {/* {renderSwitch(location.pathname, location.search)} */}\r\n\r\n                {/* <CreateEvent /> */}\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\MangerDashboard\\listItems.jsx",["515","516"],"import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport EmojiEventsIcon from \"@material-ui/icons/EmojiEvents\";\r\nimport BusinessIcon from \"@material-ui/icons/Business\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logout } from \"../../actions/auth\";\r\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n// css\r\nimport \"./Dashboard.scss\";\r\n\r\nconst MainListItems = () => {\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n  const logOut = () => {\r\n    dispatch(logout());\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        <NavLink to=\"/manager\" className=\"admin__links\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <DashboardIcon  className=\"color--white\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Dashboard\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        <NavLink to=\"/manager/assets\" className=\"admin__links\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <EmojiEventsIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"My Assets\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        <NavLink to=\"/manager/addasset\" className=\"admin__links\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <BusinessIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Add an Asset\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        <Divider style={{ backgroundColor: \"#fff\" }} />\r\n      </div>\r\n      <div>\r\n        \r\n        <Divider style={{ backgroundColor: \"#fff\" }} />\r\n        <ListSubheader inset style={{ color: \"#fff\" ,  paddingLeft:25}}>\r\n          Profile\r\n        </ListSubheader>\r\n        <NavLink\r\n          to={`/manager/editprofile/${currentUser.user._id}`}\r\n          className=\"admin__links\"\r\n        >\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <AccountBoxIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Edit Profile\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        <NavLink to=\"/login\" className=\"admin__links\" onClick={logOut}>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <ExitToAppIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Log Out\" />\r\n          </ListItem>\r\n        </NavLink>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainListItems;\r\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\AdminDashboard.jsx",["517"],"import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, Redirect } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport MainListItems from \"./listItems\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport UserTable from \"./Tables/UserTable\";\r\nimport AssetsTable from \"./Tables/AssetsTable\";\r\n// import EventsTable from \"./Tables/EventsTable\";\r\nimport AdminTable from \"./Tables/AdminTable\";\r\nimport ManagerTable from \"./Tables/ManagerTable\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n// import EditAdminProfile from \"./Tables/EditAdminProfile\";\r\n\r\n// css\r\nimport \"./Dashboard.scss\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n    backgroundColor: \"#333\",\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  // appBarShift: {\r\n  //   marginLeft: drawerWidth,\r\n  //   width: `calc(100% - ${drawerWidth}px)`,\r\n  //   transition: theme.transitions.create([\"width\", \"margin\"], {\r\n  //     easing: theme.transitions.easing.sharp,\r\n  //     duration: theme.transitions.duration.enteringScreen,\r\n  //   }),\r\n  // },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    backgroundColor: \"#333\",\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    minHeight: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const [adminDash, setAdminDash] = useState(false);\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    if (open) {\r\n      setOpen(false);\r\n    } else {\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  const location = useLocation();\r\n\r\n  function renderSwitch(param) {\r\n    switch (param) {\r\n      case \"/admin\":\r\n        return <AssetsTable />;\r\n      // case \"/admin/events\":\r\n      //   return <EventsTable />;\r\n      case \"/admin/users\":\r\n        return <UserTable />;\r\n      case \"/admin/admins\":\r\n        return <AdminTable />;\r\n      case \"/admin/managers\":\r\n        return <ManagerTable />;\r\n     \r\n      \r\n\r\n      default:\r\n        console.log(\"Wrong path\");\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      // setCreateEvent(currentUser.role.includes(\"user\"));\r\n      setAdminDash(\r\n        currentUser.role.includes(\"manager\") ||\r\n          currentUser.role.includes(\"user\")\r\n      );\r\n    }\r\n  }, [currentUser]);\r\n\r\n  // if (!localStorage.getItem(\"token\")) {\r\n  //   return <Redirect to={\"/\"} />;\r\n  // }\r\n  if (adminDash || !currentUser) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"absolute\"\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            className={classes.title}\r\n            color=\"inherit\"\r\n            noWrap\r\n          >\r\n            <NavLink to=\"/admin\" className=\"dashboard__link\">\r\n              DAMS Admin Dashboard\r\n            </NavLink>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <List style={{ marginTop: \"20px\" }}>\r\n          <MainListItems />\r\n        </List>\r\n        <Divider />\r\n        {/* <List>{secondaryListItems}</List> */}\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* Chart */}\r\n\r\n            {/* Recent Deposits */}\r\n            {/* <Grid item xs={12} md={4} lg={3}>\r\n              <Paper className={fixedHeightPaper}>\r\n                <Deposits />\r\n              </Paper>\r\n            </Grid> */}\r\n            {/* Recent Orders */}\r\n            <Grid item xs={12}>\r\n              <Paper className={classes.paper}>\r\n                {renderSwitch(location.pathname, location.search)}\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\listItems.jsx",["518","519","520"],"import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport GroupIcon from \"@material-ui/icons/Group\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport BusinessIcon from \"@material-ui/icons/Business\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport CategoryIcon from \"@material-ui/icons/Category\";\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport SupervisorAccountIcon from \"@material-ui/icons/SupervisorAccount\";\r\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logout } from \"../../actions/auth\";\r\n// css\r\nimport \"./Dashboard.scss\";\r\n\r\nconst MainListItems = () => {\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n  const logOut = () => {\r\n    dispatch(logout());\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        <ListSubheader inset style={{ color: \"#fff\" , paddingLeft:25 }}>\r\n          Admin Dashboard\r\n        </ListSubheader>\r\n        <NavLink to=\"/admin\" className=\"admin__links\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <DashboardIcon className=\"color--white\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Dashboard\" />\r\n          </ListItem>\r\n        </NavLink>\r\n\r\n        <NavLink to=\"/admin/admins\" className=\"admin__links\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <SupervisorAccountIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Admins\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        <NavLink to=\"/admin/managers\" className=\"admin__links\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <BusinessIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Managers\" />\r\n          </ListItem>\r\n        </NavLink>\r\n\r\n        <NavLink to=\"/admin/users\" className=\"admin__links\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <GroupIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Users\" />\r\n          </ListItem>\r\n        </NavLink>\r\n\r\n      \r\n\r\n       \r\n\r\n        <Divider style={{ backgroundColor: \"#fff\" }} />\r\n      </div>\r\n      <div>\r\n        \r\n       \r\n        <Divider style={{ backgroundColor: \"#fff\" }} />\r\n        <ListSubheader inset style={{ color: \"#fff\" , paddingLeft:25}}>\r\n          Profile\r\n        </ListSubheader>\r\n        <NavLink\r\n          to={`/admins/editprofile/${currentUser.user._id}`}\r\n          className=\"admin__links\"\r\n        >\r\n       <ListItem button>\r\n            <ListItemIcon>\r\n              <AccountBoxIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Edit Profile\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        <NavLink to=\"/login\" className=\"admin__links\" onClick={logOut}>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <ExitToAppIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Log Out\" />\r\n          </ListItem>\r\n        </NavLink>\r\n\r\n        {/* <ListItem button>\r\n      <ListItemIcon>\r\n        <HighlightOffIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Declined Requests\" />\r\n    </ListItem> */}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainListItems;\r\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\Tables\\AdminTable.jsx",["521","522","523","524","525","526"],"import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { getRegister, deleteUser } from \"../../../api/register\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport { getRoles } from \"../../../api/role\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: \"firstName\", numeric: false, disablePadding: true, label: \"Name\" },\r\n  { id: \"lastName\", numeric: true, disablePadding: false, label: \"Surname\" },\r\n  { id: \"email\", numeric: true, disablePadding: false, label: \"Email\" },\r\n\r\n  { id: \"role_id\", numeric: true, disablePadding: false, label: \"Role ID\" },\r\n  // // { id: \"edit\", numeric: true, disablePadding: false, label: \"Edit\" },\r\n  // { id: \"delete\", numeric: true, disablePadding: false, label: \"Delete\" },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}>\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}>\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}>\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\">\r\n          {(\"Admins\")}\r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function UserTable() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"name\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [users, setUsers] = React.useState([]);\r\n  const [roleDetails, setRolesDetails] = React.useState([]);\r\n\r\n  const getUsersList = async () => {\r\n    const response = await getRegister();\r\n    const filteredAdmins = response.filter(\r\n      (user) => user.role_id === \"61448b464e8fb8a517a8dfb7\"\r\n    );\r\n    setUsers(filteredAdmins);\r\n  };\r\n  const getRolesList = async () => {\r\n    const response = await getRoles();\r\n    setRolesDetails(response);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUsersList();\r\n    getRolesList();\r\n  }, []);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    await deleteUser(id);\r\n    history.go(\"/users\");\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = users.map((n) => n.firstName);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, users.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <EnhancedTableToolbar numSelected={selected.length} />\r\n      <TableContainer>\r\n        <Table\r\n          className={classes.table}\r\n          aria-labelledby=\"tableTitle\"\r\n          size=\"medium\"\r\n          aria-label=\"enhanced table\">\r\n          <EnhancedTableHead\r\n            classes={classes}\r\n            numSelected={selected.length}\r\n            order={order}\r\n            orderBy={orderBy}\r\n            onSelectAllClick={handleSelectAllClick}\r\n            onRequestSort={handleRequestSort}\r\n            rowCount={users.length}\r\n          />\r\n          <TableBody>\r\n            {stableSort(users, getComparator(order, orderBy))\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((user, index) => {\r\n                const isItemSelected = isSelected(user.firstName);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onClick={(event) => handleClick(event, user.firstName)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={user._id}\r\n                    selected={isItemSelected}>\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        checked={isItemSelected}\r\n                        inputProps={{ \"aria-labelledby\": labelId }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      component=\"th\"\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      padding=\"none\">\r\n                      {user.firstName}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{user.lastName}</TableCell>\r\n                    <TableCell align=\"right\">{user.email}</TableCell>\r\n                    {/* <TableCell align=\"right\">{user.password}</TableCell> */}\r\n                    <TableCell align=\"right\">{user.role_id}</TableCell>\r\n                    \r\n                    {/* <TableCell align=\"right\">\r\n                      <IconButton\r\n                        onClick={() => handleDelete(user._id)}\r\n                        className=\"delete_button\"\r\n                        aria-label=\"delete\">\r\n                        <DeleteIcon className=\"delete_icon\" />\r\n                      </IconButton>\r\n                    </TableCell> */}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            {/* {emptyRows > 0 && (\r\n                <TableRow style={{ emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )} */}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[5, 10]}\r\n        component=\"div\"\r\n        count={users.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\Tables\\UserTable.jsx",["527","528"],"import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { getRegister, deleteUser, editUser, editRole } from \"../../../api/register\";\r\nimport { getRoles } from \"../../../api/role\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: \"firstName\", numeric: false, disablePadding: true, label: \"Name\" },\r\n  { id: \"lastName\", numeric: true, disablePadding: false, label: \"Surname\" },\r\n  { id: \"email\", numeric: true, disablePadding: false, label: \"Email\" },\r\n  // {\r\n  //   id: \"password\",\r\n  //   numeric: true,\r\n  //   disablePadding: false,\r\n  //   label: \"Password\",\r\n  // },\r\n  { id: \"role_id\", numeric: true, disablePadding: false, label: \"Role ID\" },\r\n  { id: \"edit\", numeric: true, disablePadding: false, label: \"Edit\" },\r\n  { id: \"delete\", numeric: true, disablePadding: false, label: \"Delete\" },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}>\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}>\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}>\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\">\r\n          {(\"Users\")}\r\n        </Typography>\r\n      )}\r\n\r\n      {/* {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        \"\"\r\n      )} */}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    width: 220,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function UserTable() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"name\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [users, setUsers] = React.useState([]);\r\n  const [rolesDetails, setRolesDetails] = React.useState([]);\r\n  const [roleValue, setRoleValue] = React.useState(\"\");\r\n\r\n  const getUsersList = async () => {\r\n    const response = await getRegister();\r\n    const filteredUsers = response.filter(\r\n      (user) => user.role_id === \"61448b884e8fb8a517a8dfb9\"\r\n    );\r\n    setUsers(filteredUsers);\r\n  };\r\n\r\n  const getRolesList = async () => {\r\n    const response = await getRoles();\r\n    setRolesDetails(response);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUsersList();\r\n    getRolesList();\r\n  }, []);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    await deleteUser(id);\r\n    history.go(\"/users\");\r\n  };\r\n\r\n  const handleEditSubmit = async (id) => {\r\n    const edituser = {\r\n      user_id: currentUser.user._id,\r\n      adm_id: currentUser.user.role_id,\r\n      role_id: roleValue,\r\n    };\r\n    try {\r\n      // await editUser(id, edituser);\r\n      await editRole(edituser, id);\r\n      history.go(\"/users\");\r\n      console.log(\"User Role has been edited!\");\r\n      setTimeout(() => {\r\n        history.go(\"/admin/users\");\r\n      }, 500);\r\n    } catch (e) {}\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = users.map((n) => n.firstName);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <EnhancedTableToolbar numSelected={selected.length} />\r\n      <TableContainer>\r\n        <Table\r\n          className={classes.table}\r\n          aria-labelledby=\"tableTitle\"\r\n          size=\"medium\"\r\n          aria-label=\"enhanced table\">\r\n          <EnhancedTableHead\r\n            classes={classes}\r\n            numSelected={selected.length}\r\n            order={order}\r\n            orderBy={orderBy}\r\n            onSelectAllClick={handleSelectAllClick}\r\n            onRequestSort={handleRequestSort}\r\n            rowCount={users.length}\r\n          />\r\n          <TableBody>\r\n            {stableSort(users, getComparator(order, orderBy))\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((user, index) => {\r\n                const isItemSelected = isSelected(user.firstName);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onClick={(event) => handleClick(event, user.firstName)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={user._id}\r\n                    selected={isItemSelected}>\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        checked={isItemSelected}\r\n                        inputProps={{ \"aria-labelledby\": labelId }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      component=\"th\"\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      padding=\"none\">\r\n                      {user.firstName}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{user.lastName}</TableCell>\r\n                    <TableCell align=\"right\">{user.email}</TableCell>\r\n                    {/* <TableCell align=\"right\">{user.password}</TableCell> */}\r\n                    <TableCell align=\"right\">\r\n                      <FormControl className={classes.formControl}>\r\n                        <InputLabel id=\"demo-simple-select-label\">\r\n                          Role\r\n                        </InputLabel>\r\n                        <Select\r\n                          labelId=\"demo-simple-select-label\"\r\n                          id=\"demo-simple-select\"\r\n                          defaultValue={user.role_id}\r\n                          onChange={(e) => setRoleValue(e.target.value)}>\r\n                          {rolesDetails.map((roles) => (\r\n                            <MenuItem value={roles._id}>\r\n                              {roles.roleName}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <IconButton\r\n                        // onClick={() => handleEditSubmit()}\r\n                        onClick={() => {\r\n                          if (\r\n                            window.confirm(\r\n                              \"Are you sure you want to edit user's role?\"\r\n                            )\r\n                          ) {\r\n                            handleEditSubmit(user._id);\r\n                          }\r\n                        }}\r\n                        className=\"edit_button\"\r\n                        aria-label=\"edit\">\r\n                        <EditIcon className=\"edit_icon\" />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <IconButton\r\n                        // onClick={() => handleDelete(user._id)}\r\n                        onClick={() => {\r\n                          if (window.confirm(\"Delete User?\")) {\r\n                            handleDelete(user._id);\r\n                          }\r\n                        }}\r\n                        className=\"delete_button\"\r\n                        aria-label=\"delete\">\r\n                        <DeleteIcon className=\"delete_icon\" />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                    {/* <TableCell align=\"right\">\r\n                        <Button\r\n                          size=\"small\"\r\n                          variant=\"contained\"\r\n                          color=\"secondary\">\r\n                          Make Admin\r\n                        </Button>\r\n                      </TableCell> */}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            {/* {emptyRows > 0 && (\r\n                <TableRow style={{ emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )} */}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[5, 10]}\r\n        component=\"div\"\r\n        count={users.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\api\\role.js",[],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\Tables\\ManagerTable.jsx",["529","530"],"import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport {\r\n  getRegister,\r\n  deleteUser,\r\n  editUser,\r\n  editRole,\r\n} from \"../../../api/register\";\r\nimport { getRoles } from \"../../../api/role\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: \"firstName\", numeric: false, disablePadding: true, label: \"Name\" },\r\n  { id: \"lastName\", numeric: true, disablePadding: false, label: \"Surname\" },\r\n  { id: \"email\", numeric: true, disablePadding: false, label: \"Email\" },\r\n  \r\n  { id: \"role_id\", numeric: true, disablePadding: false, label: \"Role\" },\r\n  { id: \"edit\", numeric: true, disablePadding: false, label: \"Edit\" },\r\n  { id: \"delete\", numeric: true, disablePadding: false, label: \"Delete\" },\r\n  \r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          {(\"Managers\")}\r\n        </Typography>\r\n      )}\r\n\r\n      \r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    width: 220,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function ManagerTable() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"name\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  // const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [users, setUsers] = React.useState([]);\r\n  const [rolesDetails, setRolesDetails] = React.useState([]);\r\n  const [roleValue, setRoleValue] = React.useState(\"\");\r\n\r\n  const getUsersList = async () => {\r\n    const response = await getRegister();\r\n    const filteredUsers = response.filter(\r\n      (user) => user.role_id === \"61448b5a4e8fb8a517a8dfb8\"\r\n    );\r\n    setUsers(filteredUsers);\r\n  };\r\n  const getRolesList = async () => {\r\n    const response = await getRoles();\r\n    setRolesDetails(response);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUsersList();\r\n    getRolesList();\r\n  }, []);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    await deleteUser(id);\r\n    history.go(\"/users\");\r\n  };\r\n \r\n  const handleEditSubmit = async (id) => {\r\n    const edituser = {\r\n      user_id: currentUser.user._id,\r\n      adm_id: currentUser.user.role_id,\r\n      role_id: roleValue,\r\n    };\r\n    try {\r\n      // await editUser(id, edituser);\r\n      await editRole(edituser, id);\r\n      history.go(\"/users\");\r\n      console.log(\"User Role has been edited!\");\r\n      setTimeout(() => {\r\n        history.go(\"/admin/users\");\r\n      }, 500);\r\n    } catch (e) {}\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = users.map((n) => n.firstName);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  // const handleAdmin = () => {};\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  \r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  // const emptyRows =\r\n  //   rowsPerPage - Math.min(rowsPerPage, users.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <EnhancedTableToolbar numSelected={selected.length} />\r\n      <TableContainer>\r\n        <Table\r\n          className={classes.table}\r\n          aria-labelledby=\"tableTitle\"\r\n          size=\"medium\"\r\n          aria-label=\"enhanced table\"\r\n        >\r\n          <EnhancedTableHead\r\n            classes={classes}\r\n            numSelected={selected.length}\r\n            order={order}\r\n            orderBy={orderBy}\r\n            onSelectAllClick={handleSelectAllClick}\r\n            onRequestSort={handleRequestSort}\r\n            rowCount={users.length}\r\n          />\r\n          <TableBody>\r\n            {stableSort(users, getComparator(order, orderBy))\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((user, index) => {\r\n                const isItemSelected = isSelected(user.firstName);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onClick={(event) => handleClick(event, user.firstName)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={user._id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        checked={isItemSelected}\r\n                        inputProps={{ \"aria-labelledby\": labelId }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      component=\"th\"\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      padding=\"none\"\r\n                    >\r\n                      {user.firstName}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{user.lastName}</TableCell>\r\n                    <TableCell align=\"right\">{user.email}</TableCell>\r\n                    {/* <TableCell align=\"right\">{user.password}</TableCell> */}\r\n                    <TableCell align=\"right\">\r\n                      <FormControl className={classes.formControl}>\r\n                        <InputLabel id=\"demo-simple-select-label\">\r\n                          Role\r\n                        </InputLabel>\r\n                        <Select\r\n                          labelId=\"demo-simple-select-label\"\r\n                          id=\"demo-simple-select\"\r\n                          defaultValue={user.role_id}\r\n                          onChange={(e) => setRoleValue(e.target.value)}\r\n                        >\r\n                          {rolesDetails.map((roles) => (\r\n                            <MenuItem value={roles._id}>\r\n                              {roles.roleName}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    </TableCell>\r\n                    \r\n                    <TableCell align=\"right\">\r\n                      <IconButton\r\n                        // onClick={() => handleEditSubmit()}\r\n                        onClick={() => {\r\n                          if (\r\n                            window.confirm(\r\n                              \"Are you sure you want to edit user's role?\"\r\n                            )\r\n                          ) {\r\n                            handleEditSubmit(user._id);\r\n                          }\r\n                        }}\r\n                        className=\"edit_button\"\r\n                        aria-label=\"edit\"\r\n                      >\r\n                        <EditIcon className=\"edit_icon\" />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <IconButton\r\n                        // onClick={() => handleDelete(user._id)}\r\n                        onClick={() => {\r\n                          if (window.confirm(\"Delete company?\")) {\r\n                            handleDelete(user._id);\r\n                          }\r\n                        }}\r\n                        className=\"delete_button\"\r\n                        aria-label=\"delete\"\r\n                      >\r\n                        <DeleteIcon className=\"delete_icon\" />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                    \r\n                  </TableRow>\r\n                );\r\n              })}\r\n           \r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[5, 10]}\r\n        component=\"div\"\r\n        count={users.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\Tables\\AdminEditProfile.jsx",["531","532"],"import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, Redirect } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport MainListItems from \"../listItems\";\r\nimport List from \"@material-ui/core/List\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { NavLink } from \"react-router-dom\";\r\n// import EventsTable from \"./Tables/EventsTable\";\r\nimport { useSelector } from \"react-redux\";\r\nimport EditProfile from \"../../EditProfile/EditProfile\";\r\n// css\r\nimport \"./Dashboard.scss\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  editProfile: {\r\n    marginTop: -50,\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24,\r\n    backgroundColor: \"#333\",\r\n  },\r\n  appBar: {\r\n    backgroundColor: \"#333\",\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  // appBarShift: {\r\n  //   marginLeft: drawerWidth,\r\n  //   width: `calc(100% - ${drawerWidth}px)`,\r\n  //   transition: theme.transitions.create([\"width\", \"margin\"], {\r\n  //     easing: theme.transitions.easing.sharp,\r\n  //     duration: theme.transitions.duration.enteringScreen,\r\n  //   }),\r\n  // },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    backgroundColor: \"#333\",\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    minHeight: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    marginTop: 55,\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const [adminDash, setAdminDash] = useState(false);\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    if (open) {\r\n      setOpen(false);\r\n    } else {\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      // setCreateEvent(currentUser.role.includes(\"user\"));\r\n      setAdminDash(\r\n        currentUser.role.includes(\"manager\") ||\r\n          currentUser.role.includes(\"user\")\r\n      );\r\n    }\r\n  }, [currentUser]);\r\n\r\n  // if (!localStorage.getItem(\"token\")) {\r\n  //   return <Redirect to={\"/\"} />;\r\n  // }\r\n  // if (adminDash || !currentUser) {\r\n    if ( adminDash || !currentUser) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"absolute\"\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            className={classes.title}\r\n            color=\"inherit\"\r\n            noWrap\r\n          >\r\n            <NavLink to=\"/admin\" className=\"dashboard__link\">\r\n              ninJS Events\r\n            </NavLink>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <List style={{ marginTop: \"20px\" }}>\r\n          {\" \"}\r\n          <MainListItems />\r\n        </List>\r\n        <Divider />\r\n      </Drawer>\r\n\r\n      <main className={classes.content}>\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid item xs={12}>\r\n            <Paper className={classes.paper}>\r\n              <div className={classes.editProfile}>\r\n                <EditProfile />\r\n              </div>\r\n            </Paper>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\EditProfile\\EditProfile.jsx",["533","534","535","536","537"],"import React, { useState, useEffect } from \"react\";\r\nimport { editUser, getUser } from \"../../api/register\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\n// import {Form} from \"react-bootstrap\";\r\n// css\r\n\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport \"./EditProfile.scss\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Header from \"../Header/Header\";\r\nimport Footer from \"../Footer/Footer\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\n// export default function Register() {\r\nconst EditProfile = () => {\r\n  const history = useHistory();\r\n  let { id } = useParams();\r\n  const classes = useStyles();\r\n  const [showEditForm, setShowEditForm] = useState(false);\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const [errMessage, setErrMessage] = useState(false);\r\n  const [successMessage, setSuccessMessage] = useState(false);\r\n  const { register, handleSubmit, errors } = useForm();\r\n  const [userDetails, setUserDetails] = useState({});\r\n  const getUserFields = async () => {\r\n    const response = await getUser(id);\r\n    setUserDetails((oldDetails) => ({\r\n      ...oldDetails,\r\n      firstName: response.firstName,\r\n      lastName: response.lastName,\r\n      password: response.password,\r\n    }));\r\n    setShowEditForm(true);\r\n  };\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserDetails({ ...userDetails, [name]: value });\r\n  };\r\n\r\n  const onSubmit = async (data, e) => {\r\n    const registerData = {\r\n      firstName: data.firstName,\r\n      lastName: data.lastName,\r\n      oldPassword: data.oldPassword,\r\n      password: data.password,\r\n    };\r\n\r\n    try {\r\n      const response = await editUser(registerData, id);\r\n\r\n      setErrMessage(response.errMessage);\r\n\r\n      setSuccessMessage(response.successMessage);\r\n      e.target.reset();\r\n      // setTimeout(() => {\r\n      //   history.push(\"/login\");\r\n      // }, 2000);\r\n    } catch (e) {}\r\n  };\r\n  useEffect(() => {\r\n    getUserFields();\r\n  }, [currentUser]);\r\n  // if (currentUser) {\r\n  //   return <Redirect to={\"/\"} />;\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      {currentUser.role.includes(\"user\") ? <Header /> : \"\"}\r\n\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography\r\n            style={{ marginBottom: \"20px\" }}\r\n            component=\"h1\"\r\n            variant=\"h5\"\r\n          >\r\n            Edit your profile\r\n          </Typography>\r\n          <br />\r\n          {errMessage && <Alert severity=\"error\">{errMessage}</Alert>}\r\n          {successMessage && <Alert severity=\"success\">{successMessage}</Alert>}\r\n          <br />\r\n          {/* <FormControl\r\n          className={classes.formControl}\r\n          onSubmit={handleSubmit(onSubmit)}\r\n        > */}\r\n          <form\r\n            className={classes.formControl}\r\n            onSubmit={handleSubmit(onSubmit)}\r\n            autoComplete=\"off\"\r\n          >\r\n            <Grid container>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  // autoComplete=\"fname\"\r\n                  variant=\"outlined\"\r\n                  label=\"First Name\"\r\n                  InputLabelProps={{ shrink: true }}\r\n                  // required\r\n                  fullWidth\r\n                  name=\"firstName\"\r\n                  type=\"text\"\r\n                  id=\"firstName\"\r\n                  value={userDetails.firstName}\r\n                  onChange={handleChange}\r\n                  inputRef={register({ required: true, minLength: 3 })}\r\n                  // onChange={handleChange}\r\n                />\r\n                <p style={{ color: \"red\" }}>\r\n                  &#8203;\r\n                  {errors.firstName && errors.firstName.type === \"required\" && (\r\n                    <span>This field is required!</span>\r\n                  )}\r\n                  {errors.firstName &&\r\n                    errors.firstName.type === \"minLength\" && (\r\n                      <span>\r\n                        This field requires minimum length of 3 characters!\r\n                      </span>\r\n                    )}\r\n                </p>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"Last Name\"\r\n                  InputLabelProps={{ shrink: true }}\r\n                  // required\r\n                  fullWidth\r\n                  name=\"lastName\"\r\n                  type=\"text\"\r\n                  id=\"lastName\"\r\n                  value={userDetails.lastName}\r\n                  onChange={handleChange}\r\n                  // autoComplete=\"lname\"\r\n                  inputRef={register({ required: true, minLength: 3 })}\r\n                />\r\n                <p style={{ color: \"red\" }}>\r\n                  &#8203;\r\n                  {errors.lastName && errors.lastName.type === \"required\" && (\r\n                    <span>This field is required!</span>\r\n                  )}\r\n                  {errors.lastName && errors.lastName.type === \"minLength\" && (\r\n                    <span>\r\n                      This field requires minimum length of 3 characters!\r\n                    </span>\r\n                  )}\r\n                </p>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  // required\r\n                  fullWidth\r\n                  name=\"oldPassword\"\r\n                  label=\"Current Password\"\r\n                  InputLabelProps={{ shrink: true }}\r\n                  type=\"password\"\r\n                  id=\"oldPassword\"\r\n                  // onChange={handleChange}\r\n                  // value={userDetails.oldPassword}\r\n                  // autoComplete=\"current-password\"\r\n                  inputRef={register({ required: true, minLength: 6 })}\r\n                />\r\n                <p style={{ color: \"red\" }}>\r\n                  &#8203;\r\n                  {errors.oldPassword &&\r\n                    errors.oldPassword.type === \"required\" && (\r\n                      <span>This field is required!</span>\r\n                    )}\r\n                  {errors.oldPassword &&\r\n                    errors.oldPassword.type === \"minLength\" && (\r\n                      <span>\r\n                        This field requires minimum length of 6 characters!\r\n                      </span>\r\n                    )}\r\n                </p>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  id=\"outlined-helperText\"\r\n                  label=\"New Password\"\r\n                  InputLabelProps={{ shrink: true }}\r\n                  // required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  variant=\"outlined\"\r\n                  type=\"password\"\r\n                  // onChange={handleChange}\r\n                  // value={userDetails.password}\r\n                  // autoComplete=\"current-password\"\r\n                  inputRef={register({ required: true, minLength: 6 })}\r\n                />\r\n                <p style={{ color: \"red\" }}>\r\n                  &#8203;\r\n                  {errors.password && errors.password.type === \"required\" && (\r\n                    <span>This field is required!</span>\r\n                  )}\r\n                  {errors.password && errors.password.type === \"minLength\" && (\r\n                    <span>\r\n                      This field requires minimum length of 6 characters!\r\n                    </span>\r\n                  )}\r\n                </p>\r\n              </Grid>\r\n\r\n              <Button\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ marginBottom: \"15px\" }}\r\n                // className={classes.submit}\r\n                // onClick={handleSubmit}\r\n                type=\"submit\"\r\n              >\r\n                Submit\r\n              </Button>\r\n              {/* <Grid container justify=\"flex-end\">\r\n                <Grid item>\r\n                  <Link to=\"/login\" variant=\"body2\">\r\n                    Already have an account? Sign in\r\n                  </Link>\r\n                </Grid>\r\n              </Grid> */}\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n        <Box mt={5}></Box>\r\n      </Container>\r\n      {currentUser.role.includes(\"user\") ? <Footer /> : \"\"}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditProfile;\r\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\MangerDashboard\\Tables\\AssetsTable.jsx",["538","539","540","541","542"],"import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { Link ,Redirect} from \"react-router-dom\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {getAssets} from \"../../../api/assets\";\r\nimport { deleteAsset, getManagerAssets } from \"../../../api/editAsset\";\r\n// import { getCategories } from \"../../../api/filter\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"assetNr\",\r\n    // numeric: \"right\",\r\n    disablePadding: false,\r\n    label: \"No.\",\r\n  },\r\n  // {\r\n  //   id: \"assetOldNr\",\r\n  //   numeric: \"center\",\r\n  //   disablePadding: false,\r\n  //   label: \"Old no.\",\r\n  // },\r\n  {\r\n    id: \"assetCategory\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Category\",\r\n  },\r\n  {\r\n    id: \"assetDescription\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Description\",\r\n  },\r\n  {\r\n    id: \"assetModel\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Model\",\r\n  },\r\n  {\r\n    id: \"assetSerialNo\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Serial no.\",\r\n  },\r\n  {\r\n    id: \"assetSupplier\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Supplier\",\r\n  },\r\n  {\r\n    id: \"price\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Price\",\r\n  }, \r\n  {\r\n    id: \"deliveryDate\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Delivery date\",\r\n  },\r\n  {\r\n    id: \"publishDate\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Publish date\",\r\n  },\r\n  \r\n  {\r\n    id: \"donorName\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Donor\",\r\n  },\r\n  {\r\n    id: \"projectName\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Project Name\",\r\n  },\r\n  {\r\n    id: \"assetLocation\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Location\",\r\n  },\r\n  {\r\n    id: \"roomNo\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Room no.\",\r\n  },\r\n  {\r\n    id: \"assetHolder\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Holder\",\r\n  },\r\n\r\n  {\r\n    id: \"edit\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Edit Asset\",\r\n  },\r\n  {\r\n    id: \"delete\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Delete Asset\",\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}>\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}>\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}>\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\">\r\n          Assets added by me\r\n        </Typography>\r\n      )}\r\n\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function AssetsTable() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  // const { user: currentUser } = useSelector((state) => state.auth);\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"name\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  // const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [asset, setAssets] = React.useState([]);\r\n  const [searchCategories, setSearchCategories] = React.useState([]);\r\n\r\n  \r\n\r\n  const getAssetsList = async () => {\r\n    const response = await getManagerAssets(currentUser.user._id);\r\n\r\n    setAssets(response);\r\n  };\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    getAssetsList();\r\n   \r\n  }, []);\r\n\r\n  const handleDeleteSubmit = async (id) => {\r\n    const deleteuser = {\r\n      user_id: currentUser.user._id,\r\n    };\r\n    try {\r\n      await deleteAsset(id, deleteuser);\r\n\r\n      console.log(\"Asset has been deleted!\");\r\n      setTimeout(() => {\r\n        \r\n        history.go(\"/manager/assets\");\r\n      }, 1000);\r\n    } catch (e) {}\r\n  };\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  \r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  \r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, asset.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        sm={12}\r\n        md={12}\r\n        component={Paper}\r\n        className={classes.paper}\r\n      >\r\n        <EnhancedTableToolbar numSelected={selected.length} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={asset.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(asset, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((asset, index) => {\r\n                  const isItemSelected = isSelected(asset.title);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(e) => handleClick(e, asset.title)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={asset._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ \"aria-labelledby\": labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                        align=\"left\"\r\n                      >\r\n                        {asset.assetNr}\r\n                      </TableCell>\r\n                      {/* <TableCell align=\"center\">{asset.assetOldNr}</TableCell> */}\r\n                      <TableCell align=\"center\">{asset.assetCategory}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetDescription}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetModel}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetSerialNo}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetSupplier}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.price.toFixed(2)}€{\" \"}\r\n                       </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.deliveryDate.split(\"T\")[0]}\r\n                        </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.publishDate.split(\"T\")[0]}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{asset.donorName}</TableCell>\r\n                      <TableCell align=\"center\">{asset.projectName}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetLocation}</TableCell>\r\n                      <TableCell align=\"center\">{asset.roomNo}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetHolder}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <Link to={`/manager/asset/${asset._id}`}>\r\n                          <IconButton\r\n                            aria-label=\"center\"\r\n                            className=\"edit_button\"\r\n                          >\r\n                            <EditIcon className=\"edit_icon\" />\r\n                          </IconButton>\r\n                        </Link>\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {currentUser ? (\r\n                          <IconButton\r\n                            onClick={() => {\r\n                              if (window.confirm(\"Delete the event?\")) {\r\n                                handleDeleteSubmit(asset._id);\r\n                              }\r\n                            }}\r\n                            className=\"delete_button\"\r\n                            aria-label=\"delete\"\r\n                          >\r\n                            <DeleteIcon className=\"delete_icon\" />\r\n                          </IconButton>\r\n                        ) : (\r\n                          <IconButton\r\n                            onClick={() => {\r\n                              <Redirect to=\"/\" />;\r\n                            }}\r\n                            className=\"delete_button\"\r\n                            aria-label=\"delete\"\r\n                          >\r\n                            <DeleteIcon className=\"delete_icon\" />\r\n                          </IconButton>\r\n                        )}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ emptyRows }}>\r\n                  {/* <TableCell colSpan={6} /> */}\r\n                  <Divider />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10]}\r\n          component=\"div\"\r\n          count={asset.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\MangerDashboard\\Tables\\ManagerEditProfile.jsx",["543","544"],"import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, Redirect } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport MainListItems from \"../listItems\";\r\nimport List from \"@material-ui/core/List\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { NavLink } from \"react-router-dom\";\r\n// import EventsTable from \"./Tables/EventsTable\";\r\nimport { useSelector } from \"react-redux\";\r\nimport EditProfile from \"../../EditProfile/EditProfile\";\r\n// css\r\nimport \"./Dashboard.scss\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  editProfile: {\r\n    marginTop: -50,\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24,\r\n    backgroundColor: \"#333\",\r\n  },\r\n  appBar: {\r\n    backgroundColor: \"#333\",\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  // appBarShift: {\r\n  //   marginLeft: drawerWidth,\r\n  //   width: `calc(100% - ${drawerWidth}px)`,\r\n  //   transition: theme.transitions.create([\"width\", \"margin\"], {\r\n  //     easing: theme.transitions.easing.sharp,\r\n  //     duration: theme.transitions.duration.enteringScreen,\r\n  //   }),\r\n  // },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    backgroundColor: \"#333\",\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    minHeight: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    marginTop: 55,\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const [adminDash, setAdminDash] = useState(false);\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    if (open) {\r\n      setOpen(false);\r\n    } else {\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      // setCreateEvent(currentUser.role.includes(\"user\"));\r\n      setAdminDash(\r\n        currentUser.role.includes(\"admin\") || currentUser.role.includes(\"user\")\r\n      );\r\n    }\r\n  }, [currentUser]);\r\n\r\n  // if (!localStorage.getItem(\"token\")) {\r\n  //   return <Redirect to={\"/\"} />;\r\n  // }\r\n  if (adminDash || !currentUser) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"absolute\"\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            className={classes.title}\r\n            color=\"inherit\"\r\n            noWrap\r\n          >\r\n            <NavLink to=\"/manager\" className=\"dashboard__link\">\r\n              ninJS Events\r\n            </NavLink>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <List style={{ marginTop: \"20px\" }}>\r\n          {\" \"}\r\n          <MainListItems />\r\n        </List>\r\n        <Divider />\r\n      </Drawer>\r\n\r\n      <main className={classes.content}>\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid item xs={12}>\r\n            <Paper className={classes.paper}>\r\n              <div className={classes.editProfile}>\r\n                <EditProfile />\r\n              </div>\r\n            </Paper>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\MangerDashboard\\Tables\\AddAsset.jsx",["545","546"],"import React, { useState, useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport AddAsset from \"../../Assets/AddAsset/AddAsset\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport MainListItems from \"../listItems\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n// css\r\nimport \"./Dashboard.scss\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24,\r\n    backgroundColor: \"#333\",\r\n  },\r\n  appBar: {\r\n    backgroundColor: \"#333\",\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  // appBarShift: {\r\n  //   marginLeft: drawerWidth,\r\n  //   width: `calc(100% - ${drawerWidth}px)`,\r\n  //   transition: theme.transitions.create([\"width\", \"margin\"], {\r\n  //     easing: theme.transitions.easing.sharp,\r\n  //     duration: theme.transitions.duration.enteringScreen,\r\n  //   }),\r\n  // },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    backgroundColor: \"#333\",\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    minHeight: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    // padding: theme.spacing(1),\r\n    display: \"flex\",\r\n    // marginTop: 30,\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function CompanyDashboard() {\r\n  const [companyDash, setCompanyDash] = useState(false);\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    if (open) {\r\n      setOpen(false);\r\n    } else {\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      // setCreateEvent(currentUser.role.includes(\"user\"));\r\n      setCompanyDash(\r\n        currentUser.role.includes(\"admin\") || currentUser.role.includes(\"user\")\r\n      );\r\n    }\r\n  }, [currentUser]);\r\n\r\n  // if (!localStorage.getItem(\"token\")) {\r\n  //   return <Redirect to={\"/\"} />;\r\n  // }\r\n  if (companyDash || !currentUser) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"absolute\"\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            className={classes.title}\r\n            color=\"inherit\"\r\n            noWrap\r\n          >\r\n            <NavLink to=\"/company\" className=\"dashboard__link\">\r\n              DAMS Admin Dashboard\r\n            </NavLink>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <List style={{ marginTop: \"20px\" }}>\r\n          {\" \"}\r\n          <MainListItems />\r\n        </List>\r\n        <Divider />\r\n      </Drawer>\r\n\r\n      <main className={classes.content}>\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid item xs={12}>\r\n            <Paper className={classes.paper}>\r\n              <AddAsset />\r\n            </Paper>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\Tables\\AssetsTable.jsx",["547","548","549","550"],"import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { Link ,Redirect} from \"react-router-dom\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {getAssets} from \"../../../api/assets\";\r\nimport { deleteAsset } from \"../../../api/editAsset\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"assetNr\",\r\n    // numeric: \"right\",\r\n    disablePadding: false,\r\n    label: \"No.\",\r\n  },\r\n  \r\n  {\r\n    id: \"assetCategory\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Category\",\r\n  },\r\n  {\r\n    id: \"assetDescription\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Description\",\r\n  },\r\n  {\r\n    id: \"assetModel\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Model\",\r\n  },\r\n  {\r\n    id: \"assetSerialNo\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Serial no.\",\r\n  },\r\n  {\r\n    id: \"assetSupplier\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Supplier\",\r\n  },\r\n  {\r\n    id: \"price\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Price\",\r\n  }, \r\n  {\r\n    id: \"deliveryDate\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Delivery date\",\r\n  },\r\n  {\r\n    id: \"publishDate\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Publish date\",\r\n  },\r\n  \r\n  {\r\n    id: \"donorName\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Donor\",\r\n  },\r\n  {\r\n    id: \"projectName\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Project Name\",\r\n  },\r\n  {\r\n    id: \"assetLocation\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Location\",\r\n  },\r\n  {\r\n    id: \"roomNo\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Room no.\",\r\n  },\r\n  {\r\n    id: \"assetHolder\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Holder\",\r\n  },\r\n\r\n  {\r\n    id: \"edit\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Edit Asset\",\r\n  },\r\n  {\r\n    id: \"delete\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Delete Asset\",\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}>\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}>\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}>\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\">\r\n          All Assets\r\n        </Typography>\r\n      )}\r\n\r\n      {/* {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        \"\"\r\n      )} */}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function AssetsTable() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  // const { user: currentUser } = useSelector((state) => state.auth);\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"name\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  // const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [asset, setAssets] = React.useState([]);\r\n  const [searchCategories, setSearchCategories] = React.useState([]);\r\n\r\n  \r\n\r\n  const getAssetsList = async () => {\r\n    const response = await getAssets(currentUser.user._id);\r\n\r\n    setAssets(response);\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    getAssetsList();\r\n    \r\n  }, []);\r\n\r\n  const handleDeleteSubmit = async (id) => {\r\n    const deleteuser = {\r\n      user_id: currentUser.user._id,\r\n    };\r\n    try {\r\n      await deleteAsset(id, deleteuser);\r\n\r\n      console.log(\"Event has been deleted!\");\r\n      setTimeout(() => {\r\n        \r\n        history.go(\"/admin\");\r\n      }, 1000);\r\n    } catch (e) {}\r\n  };\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  \r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  \r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, asset.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        sm={12}\r\n        md={12}\r\n        component={Paper}\r\n        className={classes.paper}\r\n      >\r\n        <EnhancedTableToolbar numSelected={selected.length} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={asset.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(asset, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((asset, index) => {\r\n                  const isItemSelected = isSelected(asset.title);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(e) => handleClick(e, asset.title)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={asset._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ \"aria-labelledby\": labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                        align=\"left\"\r\n                      >\r\n                        {asset.assetNr}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{asset.assetCategory}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetDescription}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetModel}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetSerialNo}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetSupplier}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.price.toFixed(2)}€{\" \"}\r\n                       </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.deliveryDate.split(\"T\")[0]}\r\n                        </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.publishDate.split(\"T\")[0]}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{asset.donorName}</TableCell>\r\n                      <TableCell align=\"center\">{asset.projectName}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetLocation}</TableCell>\r\n                      <TableCell align=\"center\">{asset.roomNo}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetHolder}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <Link to={`/admins/asset/${asset._id}`}>\r\n                          <IconButton\r\n                            aria-label=\"center\"\r\n                            className=\"edit_button\"\r\n                          >\r\n                            <EditIcon className=\"edit_icon\" />\r\n                          </IconButton>\r\n                        </Link>\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {currentUser ? (\r\n                          <IconButton\r\n                            onClick={() => {\r\n                              if (window.confirm(\"Delete the event?\")) {\r\n                                handleDeleteSubmit(asset._id);\r\n                              }\r\n                            }}\r\n                            className=\"delete_button\"\r\n                            aria-label=\"delete\"\r\n                          >\r\n                            <DeleteIcon className=\"delete_icon\" />\r\n                          </IconButton>\r\n                        ) : (\r\n                          <IconButton\r\n                            onClick={() => {\r\n                              <Redirect to=\"/\" />;\r\n                            }}\r\n                            className=\"delete_button\"\r\n                            aria-label=\"delete\"\r\n                          >\r\n                            <DeleteIcon className=\"delete_icon\" />\r\n                          </IconButton>\r\n                        )}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ emptyRows }}>\r\n                  {/* <TableCell colSpan={6} /> */}\r\n                  <Divider />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10]}\r\n          component=\"div\"\r\n          count={asset.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Assets\\GetAllAssets\\GetAssets.jsx",["551","552","553","554","555","556","557","558"],"C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\MangerDashboard\\Tables\\EditAsset.jsx",["559","560"],"import React, { useState, useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport EditAsset from \"../../Assets/EditAsset/ManagerEditAsset\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport MainListItems from \"../listItems\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n// css\r\nimport \"./Dashboard.scss\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24,\r\n    backgroundColor: \"#333\",\r\n  },\r\n  appBar: {\r\n    backgroundColor: \"#333\",\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  // appBarShift: {\r\n  //   marginLeft: drawerWidth,\r\n  //   width: `calc(100% - ${drawerWidth}px)`,\r\n  //   transition: theme.transitions.create([\"width\", \"margin\"], {\r\n  //     easing: theme.transitions.easing.sharp,\r\n  //     duration: theme.transitions.duration.enteringScreen,\r\n  //   }),\r\n  // },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    backgroundColor: \"#333\",\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    minHeight: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    // padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    // marginTop: 55,\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function CompanyDashboard({ query }) {\r\n  const [companyDash, setCompanyDash] = useState(false);\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    if (open) {\r\n      setOpen(false);\r\n    } else {\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      // setCreateEvent(currentUser.role.includes(\"user\"));\r\n      setCompanyDash(\r\n        currentUser.role.includes(\"admin\") || currentUser.role.includes(\"user\")\r\n      );\r\n    }\r\n  }, [currentUser]);\r\n\r\n  // if (!localStorage.getItem(\"token\")) {\r\n  //   return <Redirect to={\"/\"} />;\r\n  // }\r\n  if (companyDash || !currentUser) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"absolute\"\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open)}>\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            className={classes.title}\r\n            color=\"inherit\"\r\n            noWrap>\r\n            <NavLink to=\"/company\" className=\"dashboard__link\">\r\n              DAMS Manager Dashboard\r\n            </NavLink>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}>\r\n        <List style={{ marginTop: \"20px\" }}>\r\n          {\" \"}\r\n          <MainListItems />\r\n        </List>\r\n        <Divider />\r\n      </Drawer>\r\n\r\n      <main className={classes.content}>\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid item xs={12}>\r\n            <Paper className={classes.paper}>\r\n              <EditAsset />\r\n            </Paper>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\AdminDashboard\\Tables\\EditAsset.jsx",["561","562"],"import React, { useState, useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport EditAsset from \"../../Assets/EditAsset/AdminEditAsset\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport MainListItems from \"../listItems\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n// css\r\nimport \"./Dashboard.scss\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24,\r\n    backgroundColor: \"#333\",\r\n  },\r\n  appBar: {\r\n    backgroundColor: \"#333\",\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  // appBarShift: {\r\n  //   marginLeft: drawerWidth,\r\n  //   width: `calc(100% - ${drawerWidth}px)`,\r\n  //   transition: theme.transitions.create([\"width\", \"margin\"], {\r\n  //     easing: theme.transitions.easing.sharp,\r\n  //     duration: theme.transitions.duration.enteringScreen,\r\n  //   }),\r\n  // },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    backgroundColor: \"#333\",\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    minHeight: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    // padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    // marginTop: 55,\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function CompanyDashboard({ query }) {\r\n  const [companyDash, setCompanyDash] = useState(false);\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    if (open) {\r\n      setOpen(false);\r\n    } else {\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      // setCreateEvent(currentUser.role.includes(\"user\"));\r\n      setCompanyDash(\r\n        currentUser.role.includes(\"manager\") || currentUser.role.includes(\"user\")\r\n      );\r\n    }\r\n  }, [currentUser]);\r\n\r\n  // if (!localStorage.getItem(\"token\")) {\r\n  //   return <Redirect to={\"/\"} />;\r\n  // }\r\n  if (companyDash || !currentUser) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"absolute\"\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open)}>\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            className={classes.title}\r\n            color=\"inherit\"\r\n            noWrap>\r\n            <NavLink to=\"/company\" className=\"dashboard__link\">\r\n              DAMS Admin Dashboard\r\n            </NavLink>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}>\r\n        <List style={{ marginTop: \"20px\" }}>\r\n          {\" \"}\r\n          <MainListItems />\r\n        </List>\r\n        <Divider />\r\n      </Drawer>\r\n\r\n      <main className={classes.content}>\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid item xs={12}>\r\n            <Paper className={classes.paper}>\r\n              <EditAsset />\r\n            </Paper>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Assets\\EditAsset\\ManagerEditAsset.jsx",["563","564","565","566","567","568"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {  getAsset } from \"../../../api/assets\";\nimport { editAsset} from \"../../../api/editAsset\";\nimport { useHistory, Redirect, useParams } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { format } from \"date-fns\";\nimport { useSelector } from \"react-redux\";\nimport \"./style.scss\";\n\nfunction EditAsset() {\n    const history = useHistory();\n    let { id } = useParams();\n    const { user: currentUser } = useSelector((state) => state.auth);\n    const [showEditForm, setShowEditForm] = useState(false);\n    const [errMessage, setErrMessage] = useState(false);\n    const [assetDetails, setAssetDetails] = useState({});\n    const [successMessage, setSuccessMessage] = useState(false);\n    const getAssetFields = async () => {\n      const response = await getAsset(id);\n      setAssetDetails((oldDetails) => ({\n        ...oldDetails,\n        assetNr: response.assetNr,\n        assetCategory: response.assetCategory,\n        assetDescription: response.assetDescription,\n        assetModel: response.assetModel,\n        assetSerialNo: response.assetSerialNo,\n        assetSupplier: response.assetSupplier,\n        price: response.price,\n        deliveryDate: response.deliveryDate,\n        donorName: response.donorName,\n        projectName: response.projectName,\n        assetLocation: response.assetLocation,\n        roomNo: response.roomNo,\n        assetHolder: response.assetHolder,\n      \n    }));\n    setShowEditForm(true);\n  };\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setAssetDetails({ ...assetDetails, [name]: value });\n  };\n  const { register, handleSubmit, errors } = useForm();\n  const onSubmit = async (data,e) => {\n    const registerData = {\n        assetCategory: data.assetCategory,\n        assetDescription: data.assetDescription,\n        assetModel: data.assetModel,\n        assetSerialNo: data.assetSerialNo,\n        assetSupplier: data.assetSupplier,\n        price: data.price,\n        deliveryDate: data.deliveryDate,\n        donorName: data.donorName,\n        projectName: data.projectName,\n        assetLocation: data.assetLocation,\n        roomNo: data.roomNo,\n        assetHolder: data.assetHolder,\n        user_id: currentUser.user._id,\n      };\n    try {\n      await editAsset(registerData, id);\n      setTimeout(() => {\n        history.push(\"/manager\");\n      }, 1000);\n    } catch (e) {}\n  };\n  useEffect(() => {\n    getAssetFields();\n    console.log(assetDetails)\n  }, [currentUser]);\n  if (!currentUser) {\n    return <Redirect to={\"/\"} />;\n  }\n  // const todayDate = format(new Date(), \"yyyy-MM-dd\");\n  const todayDate = format(new Date(), \"yyyy-MM-dd\");\n  return (\n    <>\n      <div className=\"form--createevent\">\n        <div className=\"form__title d-flex justify-content-center mb-5 mt-5 \">\n          <h1>Edit an Asset</h1>\n        </div>\n        <div className=\"d-flex justify-content-center mb-5 mt-5\">\n          <Form\n            className=\"event-form col-md-10\"\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <Row>\n              <Col className=\"col-12 col-md-6\">\n             \n                <Form.Group controlId=\"assetCategory\">\n                  <Form.Label>Asset Category</Form.Label>\n                  <Form.Control\n                    name=\"assetCategory\"\n                    type=\"text\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetCategory}\n                    placeholder=\"Asset Category...\"\n                    ref={register({ required: true,      \n                    })}\n                  />\n                    \n               \n                    <p style={{ color: \"rdelied\" }}>\n                      &#8203;\n                      {errors.assetCategory && errors.assetCategory.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetDescription\">\n                  <Form.Label>Asset Description</Form.Label>\n                  <Form.Control\n                    as=\"textarea\"\n                    rows={1}\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetDescription}\n                    name=\"assetDescription\"\n                    placeholder=\"Asset Description...\"\n                    ref={register({\n                      required: true,\n                      minLength: 5,\n                      maxLength: 1200,\n                    })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"minLength\" && (\n                        <span>\n                          This field requires minimum length of 5 characters!\n                        </span>\n                      )}\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"maxLength\" && (\n                        <span>\n                          This field has limit of maximum of 1200 characters!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetModel\">\n                  <Form.Label>Asset Model</Form.Label>\n                  <Form.Control\n                    name=\"assetModel\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetModel}\n                    type=\"text\"\n                    placeholder=\"Asset Model...\"\n                    ref={register({ required: true, minLength: 3 })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetModel &&\n                      errors.assetModel.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetSerialNo\">\n                  <Form.Label>Asset Serial No.</Form.Label>\n                  <Form.Control\n                    name=\"assetSerialNo\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetSerialNo}\n                    type=\"text\"\n                    ref={register({ required: true, minLength: 3 })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.assetSerialNo && errors.assetSerialNo.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetSupplier\">\n                  <Form.Label>Asset Supplier</Form.Label>\n                  <Form.Control\n                    name=\"assetSupplier\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetSupplier}\n                    type=\"text\"\n                    placeholder=\"Asset Supplier...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetSupplier &&\n                      errors.assetSupplier.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n                </Form.Group>\n                \n                <Form.Group controlId=\"price\">\n                  <Form.Label>Asset Price</Form.Label>\n                  <Form.Control\n                  id=\"price\"\n                    name=\"price\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.price}\n                    type=\"number\"\n                    ref={register({ required: true,      \n               \n                        pattern: {\n                          value: /^[0-9]+$/,\n                          message: \"Only Numbers\",\n                        }, })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.price && errors.price.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                </Col>\n              <Col className=\"col-12 col-md-6\">\n\n                \n                <Form.Group controlId=\"deliveryDate\">\n                  <Form.Label>Delivery Date</Form.Label>\n                  <Form.Control\n                    name=\"deliveryDate\"\n                    type=\"date\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.deliveryDate}\n                    ref={register({\n                      required: true,\n                      validate: (value) => value <= todayDate,\n                    })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.deliveryDate &&\n                      errors.deliveryDate.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    {errors.deliveryDate &&\n                      errors.deliveryDate.type === \"validate\" && (\n                        <span>\n                          Starting date cant be earlier than tomorrow!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n                <Form.Group controlId=\"donorName\">\n                <Form.Label >Donor Name</Form.Label>\n                  <Form.Control\n                    name=\"donorName\"\n                    type=\"text\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.donorName}\n                    placeholder=\"Donor name...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.donorName &&\n                      errors.donorName.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"projectName\">\n                <Form.Label >Project Name</Form.Label>\n                  <Form.Control\n                    name=\"projectName\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.projectName}\n                    type=\"text\"\n                    placeholder=\"Project name...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.projectName &&\n                      errors.projectName.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"assetLocation\">\n                <Form.Label >Asset Location</Form.Label>\n                  <Form.Control\n                    name=\"assetLocation\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetLocation}\n                    type=\"text\"\n                    placeholder=\"Asset Location...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetLocation &&\n                      errors.assetLocation.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"roomNo\">\n                  <Form.Label>Room No.</Form.Label>\n                  <Form.Control\n                    name=\"roomNo\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.roomNo}\n                    type=\"text\"\n                    ref={register({ required: true, minLength: 1 })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.roomNo && errors.roomNo.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetHolder\">\n                <Form.Label >Asset Holder</Form.Label>\n                  <Form.Control\n                    name=\"assetHolder\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetHolder}\n                    type=\"text\"\n                    placeholder=\"Asset Holder...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetHolder &&\n                      errors.assetHolder.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n              </Col>\n\n\n                \n              <Col className=\"col-12 col-md-6\">\n                <Button\n                  className=\"btn-lg font-weight-bold\"\n                  variant=\"primary\"\n                  type=\"submit\"\n                >\n                  Edit Asset\n                </Button>\n              </Col>\n              \n            </Row>\n          </Form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default EditAsset;\n\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\Assets\\EditAsset\\AdminEditAsset.jsx",["569","570","571","572","573","574","575"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {  getAsset } from \"../../../api/assets\";\nimport { editAsset} from \"../../../api/editAsset\";\nimport { useHistory, Redirect, useParams } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { format } from \"date-fns\";\n\nimport { useSelector } from \"react-redux\";\nimport \"./style.scss\";\n\nfunction EditAsset() {\n    const history = useHistory();\n    let { id } = useParams();\n    const { user: currentUser } = useSelector((state) => state.auth);\n    const [showEditForm, setShowEditForm] = useState(false);\n    const [errMessage, setErrMessage] = useState(false);\n    const [assetDetails, setAssetDetails] = useState({});\n    const [successMessage, setSuccessMessage] = useState(false);\n    const getAssetFields = async () => {\n      const response = await getAsset(id);\n      setAssetDetails((oldDetails) => ({\n        ...oldDetails,\n        assetNr: response.assetNr,\n        assetCategory: response.assetCategory,\n        assetDescription: response.assetDescription,\n        assetModel: response.assetModel,\n        assetSerialNo: response.assetSerialNo,\n        assetSupplier: response.assetSupplier,\n        price: response.price,\n        deliveryDate: response.deliveryDate,\n        donorName: response.donorName,\n        projectName: response.projectName,\n        assetLocation: response.assetLocation,\n        roomNo: response.roomNo,\n        assetHolder: response.assetHolder,\n      //  user_id: response.asset.user_id,\n    }));\n    setShowEditForm(true);\n  };\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setAssetDetails({ ...assetDetails, [name]: value });\n  };\n  const { register, handleSubmit, errors } = useForm();\n  const onSubmit = async (data,e) => {\n    const registerData = {\n        assetCategory: data.assetCategory,\n        assetDescription: data.assetDescription,\n        assetModel: data.assetModel,\n        assetSerialNo: data.assetSerialNo,\n        assetSupplier: data.assetSupplier,\n        price: data.price,\n        deliveryDate: data.deliveryDate,\n        donorName: data.donorName,\n        projectName: data.projectName,\n        assetLocation: data.assetLocation,\n        roomNo: data.roomNo,\n        assetHolder: data.assetHolder,\n        user_id: currentUser.user._id,\n      };\n      try {\n        await editAsset(registerData, id);\n        setTimeout(() => {\n          history.push(\"/admin\");\n        }, 1000);\n      } catch (e) {}\n    };\n\n \n  useEffect(() => {\n    getAssetFields();\n  }, [currentUser]);\n  if (!currentUser) {\n    return <Redirect to={\"/\"} />;\n  }\n  const todayDate = format(new Date(), \"yyyy-MM-dd\");\n\n  return (\n    <>\n      <div className=\"form--createevent\">\n        <div className=\"form__title d-flex justify-content-center mb-5 mt-5 \">\n          <h1>Edit an Asset</h1>\n        </div>\n        <div className=\"d-flex justify-content-center mb-5 mt-5\">\n          <Form\n            className=\"event-form col-md-10\"\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <Row>\n              <Col className=\"col-12 col-md-6\">\n                <Form.Group controlId=\"assetCategory\">\n                  <Form.Label>Asset Category</Form.Label>\n                  <Form.Control\n                    name=\"assetCategory\"\n                    type=\"text\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetCategory}\n                    placeholder=\"Asset Category...\"\n                    ref={register({ required: true,      \n                    })}\n                  />\n                    \n               \n                    <p style={{ color: \"rdelied\" }}>\n                      &#8203;\n                      {errors.assetCategory && errors.assetCategory.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetDescription\">\n                  <Form.Label>Asset Description</Form.Label>\n                  <Form.Control\n                    as=\"textarea\"\n                    rows={1}\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetDescription}\n                    name=\"assetDescription\"\n                    placeholder=\"Asset Description...\"\n                    ref={register({\n                      required: true,\n                      minLength: 5,\n                      maxLength: 1200,\n                    })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"minLength\" && (\n                        <span>\n                          This field requires minimum length of 5 characters!\n                        </span>\n                      )}\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"maxLength\" && (\n                        <span>\n                          This field has limit of maximum of 1200 characters!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetModel\">\n                  <Form.Label>Asset Model</Form.Label>\n                  <Form.Control\n                    name=\"assetModel\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetModel}\n                    type=\"text\"\n                    placeholder=\"Asset Model...\"\n                    ref={register({ required: true, minLength: 3 })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetModel &&\n                      errors.assetModel.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetSerialNo\">\n                  <Form.Label>Asset Serial No.</Form.Label>\n                  <Form.Control\n                    name=\"assetSerialNo\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetSerialNo}\n                    type=\"number\"\n                    type=\"text\"\n                    ref={register({ required: true, minLength: 3 })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.assetSerialNo && errors.assetSerialNo.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetSupplier\">\n                  <Form.Label>Asset Supplier</Form.Label>\n                  <Form.Control\n                    name=\"assetSupplier\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetSupplier}\n                    type=\"text\"\n                    placeholder=\"Asset Supplier...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetSupplier &&\n                      errors.assetSupplier.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n                </Form.Group>\n                \n                <Form.Group controlId=\"price\">\n                  <Form.Label>Asset Price</Form.Label>\n                  <Form.Control\n                  id=\"price\"\n                    name=\"price\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.price}\n                    type=\"number\"\n                    ref={register({ required: true,      \n               \n                        pattern: {\n                          value: /^[0-9]+$/,\n                          message: \"Only Numbers\",\n                        }, })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.price && errors.price.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                    </Form.Group>\n                    </Col>\n              <Col className=\"col-12 col-md-6\">\n                <Form.Group controlId=\"deliveryDate\">\n                  <Form.Label>Delivery Date</Form.Label>\n                  <Form.Control\n                    name=\"deliveryDate\"\n                    type=\"date\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.deliveryDate}\n                    \n                    id=\"deliveryDate\"\n                    ref={register({\n                      required: true,\n                      validate: (value) => value <= todayDate,\n                    })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.deliveryDate &&\n                      errors.deliveryDate.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    {errors.deliveryDate &&\n                      errors.deliveryDate.type === \"validate\" && (\n                        <span>\n                          Starting date cant be earlier than tomorrow!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n                <Form.Group controlId=\"donorName\">\n                <Form.Label >Donor Name</Form.Label>\n                  <Form.Control\n                    name=\"donorName\"\n                    type=\"text\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.donorName}\n                    placeholder=\"Donor name...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.donorName &&\n                      errors.donorName.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"projectName\">\n                <Form.Label >Project Name</Form.Label>\n                  <Form.Control\n                    name=\"projectName\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.projectName}\n                    type=\"text\"\n                    placeholder=\"Project name...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.projectName &&\n                      errors.projectName.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"assetLocation\">\n                <Form.Label >Asset Location</Form.Label>\n                  <Form.Control\n                    name=\"assetLocation\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetLocation}\n                    type=\"text\"\n                    placeholder=\"Asset Location...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetLocation &&\n                      errors.assetLocation.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"roomNo\">\n                  <Form.Label>Room No.</Form.Label>\n                  <Form.Control\n                    name=\"roomNo\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.roomNo}\n                    type=\"text\"\n                    ref={register({ required: true, minLength: 1 })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.roomNo && errors.roomNo.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetHolder\">\n                <Form.Label >Asset Holder</Form.Label>\n                  <Form.Control\n                    name=\"assetHolder\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetHolder}\n                    type=\"text\"\n                    placeholder=\"Asset Holder...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetHolder &&\n                      errors.assetHolder.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n              </Col>\n\n\n                \n              <Col className=\"col-12 col-md-6\">\n                <Button\n                  className=\"btn-lg font-weight-bold\"\n                  variant=\"primary\"\n                  type=\"submit\"\n                >\n                  Edit Asset\n                </Button>\n              </Col>\n             \n            </Row>\n          </Form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default EditAsset;\n\n","C:\\Users\\leutr\\OneDrive\\Desktop\\DigitalAssetManagementSystem\\dams_client\\src\\components\\MangerDashboard\\Tables\\AllAssetsTable.jsx",["576","577","578","579","580","581","582","583","584","585"],"\r\nimport React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { Link ,Redirect} from \"react-router-dom\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {getAssets} from \"../../../api/assets\";\r\n\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"assetNr\",\r\n    // numeric: \"right\",\r\n    disablePadding: false,\r\n    label: \"No.\",\r\n  },\r\n \r\n  {\r\n    id: \"assetCategory\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Category\",\r\n  },\r\n  {\r\n    id: \"assetDescription\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Description\",\r\n  },\r\n  {\r\n    id: \"assetModel\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Model\",\r\n  },\r\n  {\r\n    id: \"assetSerialNo\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Serial no.\",\r\n  },\r\n  {\r\n    id: \"assetSupplier\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Supplier\",\r\n  },\r\n  {\r\n    id: \"price\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Price\",\r\n  }, \r\n  {\r\n    id: \"deliveryDate\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Delivery date\",\r\n  },\r\n  {\r\n    id: \"publishDate\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Publish date\",\r\n  },\r\n  \r\n  {\r\n    id: \"donorName\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Donor\",\r\n  },\r\n  {\r\n    id: \"projectName\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Project Name\",\r\n  },\r\n  {\r\n    id: \"assetLocation\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Location\",\r\n  },\r\n  {\r\n    id: \"roomNo\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Room no.\",\r\n  },\r\n  {\r\n    id: \"assetHolder\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Holder\",\r\n  },\r\n\r\n  \r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}>\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}>\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}>\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\">\r\n          All Assets\r\n        </Typography>\r\n      )}\r\n\r\n      {/* {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        \"\"\r\n      )} */}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function AssetsTable() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  // const { user: currentUser } = useSelector((state) => state.auth);\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"name\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  // const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [asset, setAssets] = React.useState([]);\r\n  const [searchCategories, setSearchCategories] = React.useState([]);\r\n\r\n  \r\n\r\n  const getAssetsList = async () => {\r\n    const response = await getAssets(currentUser.user._id);\r\n\r\n    setAssets(response);\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    getAssetsList();\r\n    \r\n  }, []);\r\n\r\n  \r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  \r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  \r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, asset.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        sm={12}\r\n        md={12}\r\n        component={Paper}\r\n        className={classes.paper}\r\n      >\r\n        <EnhancedTableToolbar numSelected={selected.length} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={asset.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(asset, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((asset, index) => {\r\n                  const isItemSelected = isSelected(asset.title);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(e) => handleClick(e, asset.title)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={asset._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ \"aria-labelledby\": labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                        align=\"left\"\r\n                      >\r\n                        {asset.assetNr}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{asset.assetCategory}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetDescription}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetModel}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetSerialNo}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetSupplier}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.price.toFixed(2)}€{\" \"}\r\n                       </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.deliveryDate.split(\"T\")[0]}\r\n                        </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.publishDate.split(\"T\")[0]}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{asset.donorName}</TableCell>\r\n                      <TableCell align=\"center\">{asset.projectName}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetLocation}</TableCell>\r\n                      <TableCell align=\"center\">{asset.roomNo}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetHolder}</TableCell>\r\n                      \r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ emptyRows }}>\r\n                  {/* <TableCell colSpan={6} /> */}\r\n                  <Divider />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10]}\r\n          component=\"div\"\r\n          count={asset.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\index.js",[],["586","587"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\store.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\reportWebVitals.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\App.js",["588","589","590","591","592"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\Tables\\AdminEditProfile.jsx",["593","594"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Footer\\Footer.jsx",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\Tables\\EditAsset.jsx",["595","596"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Home\\Home.jsx",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\AdminDashboard.jsx",["597"],"import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, Redirect } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport MainListItems from \"./listItems\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport UserTable from \"./Tables/UserTable\";\r\nimport AssetsTable from \"./Tables/AssetsTable\";\r\nimport CategoryTable from \"./Tables/CategoryTable\";\r\n// import EventsTable from \"./Tables/EventsTable\";\r\nimport AdminTable from \"./Tables/AdminTable\";\r\nimport ManagerTable from \"./Tables/ManagerTable\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n// import EditAdminProfile from \"./Tables/EditAdminProfile\";\r\n\r\n// css\r\nimport \"./Dashboard.scss\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n    backgroundColor: \"#333\",\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  // appBarShift: {\r\n  //   marginLeft: drawerWidth,\r\n  //   width: `calc(100% - ${drawerWidth}px)`,\r\n  //   transition: theme.transitions.create([\"width\", \"margin\"], {\r\n  //     easing: theme.transitions.easing.sharp,\r\n  //     duration: theme.transitions.duration.enteringScreen,\r\n  //   }),\r\n  // },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    backgroundColor: \"#333\",\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    minHeight: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const [adminDash, setAdminDash] = useState(false);\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    if (open) {\r\n      setOpen(false);\r\n    } else {\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  const location = useLocation();\r\n\r\n  function renderSwitch(param) {\r\n    switch (param) {\r\n      case \"/admin\":\r\n        return <AssetsTable />;\r\n      // case \"/admin/events\":\r\n      //   return <EventsTable />;\r\n      case \"/admin/categories\":\r\n        return <CategoryTable />;\r\n      case \"/admin/users\":\r\n        return <UserTable />;\r\n      case \"/admin/admins\":\r\n        return <AdminTable />;\r\n      case \"/admin/managers\":\r\n        return <ManagerTable />;\r\n     \r\n      \r\n\r\n      default:\r\n        console.log(\"Wrong path\");\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      // setCreateEvent(currentUser.role.includes(\"user\"));\r\n      setAdminDash(\r\n        currentUser.role.includes(\"manager\") ||\r\n          currentUser.role.includes(\"user\")\r\n      );\r\n    }\r\n  }, [currentUser]);\r\n\r\n  // if (!localStorage.getItem(\"token\")) {\r\n  //   return <Redirect to={\"/\"} />;\r\n  // }\r\n  if (adminDash || !currentUser) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"absolute\"\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            className={classes.title}\r\n            color=\"inherit\"\r\n            noWrap\r\n          >\r\n            <NavLink to=\"/admin\" className=\"dashboard__link\">\r\n              DAMS Admin Dashboard\r\n            </NavLink>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <List style={{ marginTop: \"20px\" }}>\r\n          <MainListItems />\r\n        </List>\r\n        <Divider />\r\n        {/* <List>{secondaryListItems}</List> */}\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* Chart */}\r\n\r\n            {/* Recent Deposits */}\r\n            {/* <Grid item xs={12} md={4} lg={3}>\r\n              <Paper className={fixedHeightPaper}>\r\n                <Deposits />\r\n              </Paper>\r\n            </Grid> */}\r\n            {/* Recent Orders */}\r\n            <Grid item xs={12}>\r\n              <Paper className={classes.paper}>\r\n                {renderSwitch(location.pathname, location.search)}\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\MangerDashboard\\ManagerDashboard.jsx",["598"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\Tables\\ManagerTable.jsx",["599","600"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\Tables\\UserTable.jsx",["601","602"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\MangerDashboard\\Tables\\ManagerEditProfile.jsx",["603","604"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\MangerDashboard\\Tables\\AddAsset.jsx",["605","606"],"import React, { useState, useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport AddAsset from \"../../Assets/AddAsset/AddAsset\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport MainListItems from \"../listItems\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n// css\r\nimport \"./Dashboard.scss\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24,\r\n    backgroundColor: \"#333\",\r\n  },\r\n  appBar: {\r\n    backgroundColor: \"#333\",\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  // appBarShift: {\r\n  //   marginLeft: drawerWidth,\r\n  //   width: `calc(100% - ${drawerWidth}px)`,\r\n  //   transition: theme.transitions.create([\"width\", \"margin\"], {\r\n  //     easing: theme.transitions.easing.sharp,\r\n  //     duration: theme.transitions.duration.enteringScreen,\r\n  //   }),\r\n  // },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    backgroundColor: \"#333\",\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    minHeight: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    // padding: theme.spacing(1),\r\n    display: \"flex\",\r\n    // marginTop: 30,\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function CompanyDashboard() {\r\n  const [companyDash, setCompanyDash] = useState(false);\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    if (open) {\r\n      setOpen(false);\r\n    } else {\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      // setCreateEvent(currentUser.role.includes(\"user\"));\r\n      setCompanyDash(\r\n        currentUser.role.includes(\"admin\") || currentUser.role.includes(\"user\")\r\n      );\r\n    }\r\n  }, [currentUser]);\r\n\r\n  // if (!localStorage.getItem(\"token\")) {\r\n  //   return <Redirect to={\"/\"} />;\r\n  // }\r\n  if (companyDash || !currentUser) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"absolute\"\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            className={classes.title}\r\n            color=\"inherit\"\r\n            noWrap\r\n          >\r\n            <NavLink to=\"/company\" className=\"dashboard__link\">\r\n              DAMS Manager Dashboard\r\n            </NavLink>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <List style={{ marginTop: \"20px\" }}>\r\n          {\" \"}\r\n          <MainListItems />\r\n        </List>\r\n        <Divider />\r\n      </Drawer>\r\n\r\n      <main className={classes.content}>\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid item xs={12}>\r\n            <Paper className={classes.paper}>\r\n              <AddAsset />\r\n            </Paper>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Header\\Header.jsx",["607","608","609"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\MangerDashboard\\Tables\\EditAsset.jsx",["610","611"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\User\\Login\\Login.jsx",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\MangerDashboard\\Tables\\AssetsTable.jsx",["612","613","614"],"import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { Link ,Redirect} from \"react-router-dom\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {getAssets} from \"../../../api/assets\";\r\nimport { deleteAsset, getManagerAssets } from \"../../../api/editAsset\";\r\n// import { getCategories } from \"../../../api/filter\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCategories } from \"../../../api/filter\";\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"assetNr\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"No.\",\r\n  },\r\n  // {\r\n  //   id: \"assetOldNr\",\r\n  //   numeric: \"center\",\r\n  //   disablePadding: false,\r\n  //   label: \"Old no.\",\r\n  // },\r\n  {\r\n    id: \"assetCode\",\r\n     numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Code\",\r\n  },\r\n  {\r\n    id: \"assetCategory\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Category\",\r\n  },\r\n  {\r\n    id: \"assetDescription\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Description\",\r\n  },\r\n  {\r\n    id: \"assetModel\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Model\",\r\n  },\r\n  {\r\n    id: \"assetSerialNo\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Serial no.\",\r\n  },\r\n  {\r\n    id: \"assetSupplier\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Supplier\",\r\n  },\r\n  {\r\n    id: \"price\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Price\",\r\n  }, \r\n  {\r\n    id: \"deliveryDate\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Delivery date\",\r\n  },\r\n  {\r\n    id: \"publishDate\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Publish date\",\r\n  },\r\n  \r\n  {\r\n    id: \"donorName\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Donor\",\r\n  },\r\n  {\r\n    id: \"projectName\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Project Name\",\r\n  },\r\n  {\r\n    id: \"assetLocation\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Location\",\r\n  },\r\n  {\r\n    id: \"roomNo\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Room no.\",\r\n  },\r\n  {\r\n    id: \"assetHolder\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Holder\",\r\n  },\r\n  {\r\n    id: \"assetAvailability\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Status\",\r\n  },\r\n\r\n  {\r\n    id: \"edit\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Edit Asset\",\r\n  },\r\n  {\r\n    id: \"delete\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Delete Asset\",\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}>\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}>\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}>\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\">\r\n          Assets added by me\r\n        </Typography>\r\n      )}\r\n\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function AssetsTable() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  // const { user: currentUser } = useSelector((state) => state.auth);\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"name\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  // const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [asset, setAssets] = React.useState([]);\r\n  const [searchCategories, setSearchCategories] = React.useState([]);\r\n\r\n  \r\n\r\n  const getAssetsList = async () => {\r\n    const response = await getManagerAssets(currentUser.user._id);\r\n\r\n    setAssets(response);\r\n  };\r\n  const getCategoriesList = async () => {\r\n    const response = await getCategories();\r\n    setSearchCategories(response);\r\n  };\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    getAssetsList();\r\n    getCategoriesList();\r\n  }, []);\r\n\r\n  const handleDeleteSubmit = async (id) => {\r\n    const deleteuser = {\r\n      user_id: currentUser.user._id,\r\n    };\r\n    try {\r\n      await deleteAsset(id, deleteuser);\r\n\r\n      console.log(\"Asset has been deleted!\");\r\n      setTimeout(() => {\r\n        \r\n        history.go(\"/manager/assets\");\r\n      }, 1000);\r\n    } catch (e) {}\r\n  };\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  \r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  \r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, asset.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        sm={12}\r\n        md={12}\r\n        component={Paper}\r\n        className={classes.paper}\r\n      >\r\n        <EnhancedTableToolbar numSelected={selected.length} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={asset.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(asset, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((asset, index) => {\r\n                  const isItemSelected = isSelected(asset.title);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(e) => handleClick(e, asset.title)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={asset._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ \"aria-labelledby\": labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                        align=\"center\"\r\n                      >\r\n                        {asset.assetNr}\r\n                      </TableCell>\r\n                      {/* <TableCell align=\"center\">{asset.assetOldNr}</TableCell> */}\r\n                      <TableCell align=\"center\">{asset.assetCode}</TableCell>\r\n                      {searchCategories.map((category) =>\r\n                      asset.assetCategory === category._id ? (\r\n                        <TableCell align=\"center\">\r\n                          {category.assetCategory}\r\n                        </TableCell>\r\n                      ) : null\r\n                    )}\r\n                      <TableCell align=\"center\">{asset.assetDescription}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetModel}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetSerialNo}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetSupplier}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.price.toFixed(2)}€{\" \"}\r\n                       </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.deliveryDate.split(\"T\")[0]}\r\n                        </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.publishDate.split(\"T\")[0]}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{asset.donorName}</TableCell>\r\n                      <TableCell align=\"center\">{asset.projectName}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetLocation}</TableCell>\r\n                      <TableCell align=\"center\">{asset.roomNo}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetHolder}</TableCell>\r\n                      <TableCell align=\"left\">{asset.assetAvailability}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <Link to={`/manager/asset/${asset._id}`}>\r\n                          <IconButton\r\n                            aria-label=\"center\"\r\n                            className=\"edit_button\"\r\n                          >\r\n                            <EditIcon className=\"edit_icon\" />\r\n                          </IconButton>\r\n                        </Link>\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {currentUser ? (\r\n                          <IconButton\r\n                            onClick={() => {\r\n                              if (window.confirm(\"Delete the event?\")) {\r\n                                handleDeleteSubmit(asset._id);\r\n                              }\r\n                            }}\r\n                            className=\"delete_button\"\r\n                            aria-label=\"delete\"\r\n                          >\r\n                            <DeleteIcon className=\"delete_icon\" />\r\n                          </IconButton>\r\n                        ) : (\r\n                          <IconButton\r\n                            onClick={() => {\r\n                              <Redirect to=\"/\" />;\r\n                            }}\r\n                            className=\"delete_button\"\r\n                            aria-label=\"delete\"\r\n                          >\r\n                            <DeleteIcon className=\"delete_icon\" />\r\n                          </IconButton>\r\n                        )}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ emptyRows }}>\r\n                  {/* <TableCell colSpan={6} /> */}\r\n                  <Divider />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10]}\r\n          component=\"div\"\r\n          count={asset.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\User\\Register\\Register.jsx",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\EditProfile\\EditProfile.jsx",["615","616","617","618","619"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Assets\\GetAssets\\GetAssets.jsx",["620","621","622","623","624","625","626","627","628","629"],"import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n import { getAssets } from \"../../../api/assets\";\n import { getCategories } from \"../../../api/filter\";\nimport {  deleteAsset, getManagerAssets } from \"../../../api/editAsset\";\nimport { useHistory, Link, Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  {\n    id: \"assetNr\",\n    // numeric: \"right\",\n    disablePadding: false,\n    label: \"No.\",\n  },\n  {\n    id: \"assetCode\",\n    // numeric: \"right\",\n    disablePadding: false,\n    label: \"Code\",\n  },\n  {\n    id: \"assetCategory\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Category\",\n  },\n  {\n    id: \"assetDescription\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Description\",\n  },\n  {\n    id: \"assetModel\",\n     numeric: \"left\",\n    disablePadding: false,\n    label: \"Model\",\n  },\n  {\n    id: \"assetSerialNo\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Serial no.\",\n  },\n  {\n    id: \"assetSupplier\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Supplier\",\n  },\n  {\n    id: \"price\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Price\",\n  }, \n  {\n    id: \"deliveryDate\",\n     numeric: \"left\",\n    disablePadding: false,\n    label: \"Delivery date\",\n  },\n  {\n    id: \"publishDate\",\n     numeric: \"left\",\n    disablePadding: false,\n    label: \"Publish date\",\n  },\n  \n  {\n    id: \"donorName\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Donor\",\n  },\n  {\n    id: \"projectName\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Project Name\",\n  },\n  {\n    id: \"assetLocation\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Location\",\n  },\n  {\n    id: \"roomNo\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Room no.\",\n  },\n  {\n    id: \"assetHolder\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Holder\",\n  },\n  {\n    id: \"assetAvailability\",\n    numeric: \"center\",\n    disablePadding: false,\n    label: \"Status\",\n  },\n];\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? \"center\" : \"left\"}\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === \"light\"\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: \"1 1 100%\",\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          className={classes.title}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography\n          className={classes.title}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          Digital Assets\n        </Typography>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: \"auto\",\n    width: \"100%\",\n    marginTop: 70,\n    marginBottom: 50,\n    paddingLeft: 50,\n    paddingRight: 50,\n  },\n  paper: { margin: \"auto\", width: \"100%\" },\n  table: {\n    margin: \"auto\",\n    width: \"100%\",\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nexport default function GetAssets() {\n  const classes = useStyles();\n  const history = useHistory();\n  const { user: currentUser } = useSelector((state) => state.auth);\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"name\");\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [asset, setAssets] = React.useState([]);\n  const [searchCategories, setSearchCategories] = React.useState([]);\n  const getAssetsList = async () => {\n    const response = await getAssets();\n    setAssets(response);\n  };\n  // const handleDeleteSubmit = async (id) => {\n  //   const deleteuser = {\n  //     user_id: currentUser.user._id,\n  //   };\n  //   try {\n  //     await deleteAsset(id, deleteuser);\n\n  //     setTimeout(() => {\n  //       history.go(\"/\");\n  //     }, 1000);\n  //   } catch (e) {}\n  // };\n  const getCategoriesList = async () => {\n    const response = await getCategories();\n    setSearchCategories(response);\n  };\n\n  useEffect(() => {\n    getAssetsList();\n    getCategoriesList();\n  }, []);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleClick = (event, name) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const isSelected = (name) => selected.indexOf(name) !== -1;\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, asset.length - page * rowsPerPage);\nconsole.log('Assetet jon kto ' + asset.length);\nconsole.log('Kategorite jon kto ' + searchCategories.length);\n  return (\n    <div className={classes.root}>\n      \n      <Grid\n        item\n        xs={12}\n        sm={12}\n        md={12}\n        component={Paper}\n        className={classes.paper}\n      >\n        <EnhancedTableToolbar numSelected={selected.length} />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size=\"medium\"\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n              rowCount={asset.length}\n            />\n            <TableBody>\n              {stableSort(asset, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((asset, index) => {\n                  const isItemSelected = isSelected(asset.title);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(e) => handleClick(e, asset.title)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={asset._id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isItemSelected}\n                          inputProps={{ \"aria-labelledby\": labelId }}\n                        />\n                      </TableCell>\n                      <TableCell\n                        component=\"th\"\n                        id={labelId}\n                        scope=\"row\"\n                        padding=\"none\"\n                        align=\"left\"\n                      >\n                        {asset.assetNr}\n                      </TableCell>\n                      <TableCell align=\"left\">{asset.assetCode}</TableCell>\n                      {searchCategories.map((category) =>\n                      asset.assetCategory === category._id ? (\n                        <TableCell align=\"center\">\n                          {category.assetCategory}\n                        </TableCell>\n                      ) : null\n                    )}\n                      <TableCell align=\"center\">{asset.assetDescription}</TableCell>\n                      <TableCell align=\"center\">{asset.assetModel}</TableCell>\n                      <TableCell align=\"center\">{asset.assetSerialNo}</TableCell>\n                      <TableCell align=\"center\">{asset.assetSupplier}</TableCell>\n                      <TableCell align=\"center\">\n                        {asset.price.toFixed(2)}€{\" \"}\n                       </TableCell>\n                      <TableCell align=\"center\">\n                        {asset.deliveryDate.split(\"T\")[0]}\n                        </TableCell>\n                      <TableCell align=\"center\">\n                        {asset.publishDate.split(\"T\")[0]}\n                      </TableCell>\n                      <TableCell align=\"center\">{asset.donorName}</TableCell>\n                      <TableCell align=\"center\">{asset.projectName}</TableCell>\n                      <TableCell align=\"center\">{asset.assetLocation}</TableCell>\n                      <TableCell align=\"center\">{asset.roomNo}</TableCell>\n                      <TableCell align=\"center\">{asset.assetHolder}</TableCell>\n                      <TableCell align=\"left\">{asset.assetAvailability}</TableCell>\n\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ emptyRows }}>\n                  {/* <TableCell colSpan={6} /> */}\n                  <Divider />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10]}\n          component=\"div\"\n          count={asset.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Grid>\n    </div>\n  );\n}\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Assets\\EditAsset\\ManagerEditAsset.jsx",["630","631","632","633","634","635"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {  getAsset } from \"../../../api/assets\";\nimport { editAsset} from \"../../../api/editAsset\";\nimport { useHistory, Redirect, useParams } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { format } from \"date-fns\";\nimport { getCategories, getStatus } from \"../../../api/filter\";\nimport { useSelector } from \"react-redux\";\nimport \"./style.scss\";\n\nfunction EditAsset() {\n    const history = useHistory();\n    let { id } = useParams();\n    const { user: currentUser } = useSelector((state) => state.auth);\n    const [showEditForm, setShowEditForm] = useState(false);\n    const [errMessage, setErrMessage] = useState(false);\n    const [assetDetails, setAssetDetails] = useState({});\n    const [searchCategories, setSearchCategories] = useState([]);\n    const [status, setStatus] = useState([]);\n    const [successMessage, setSuccessMessage] = useState(false);\n    const getCategoriesList = async () => {\n      const response = await getCategories();\n      setSearchCategories(response);\n      console.log(response);\n    };\n    const getStatusList = async () => {\n      const response = await getStatus();\n      setStatus(response);\n    };\n\n    const getAssetFields = async () => {\n      const response = await getAsset(id);\n      setAssetDetails((oldDetails) => ({\n        ...oldDetails,\n        assetNr: response.assetNr,\n        assetCode: response.assetCode,\n        assetCategory: response.assetCategory,\n        assetDescription: response.assetDescription,\n        assetModel: response.assetModel,\n        assetSerialNo: response.assetSerialNo,\n        assetSupplier: response.assetSupplier,\n        price: response.price,\n        deliveryDate: response.deliveryDate,\n        donorName: response.donorName,\n        projectName: response.projectName,\n        assetLocation: response.assetLocation,\n        roomNo: response.roomNo,\n        assetHolder: response.assetHolder,\n        assetAvailability:response.assetAvailability,\n      \n    }));\n    setShowEditForm(true);\n  };\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setAssetDetails({ ...assetDetails, [name]: value });\n  };\n  const { register, handleSubmit, errors } = useForm();\n  const onSubmit = async (data,e) => {\n    const registerData = {\n      assetCode:data.assetCode,\n        assetCategory: data.assetCategory,\n        assetDescription: data.assetDescription,\n        assetModel: data.assetModel,\n        assetSerialNo: data.assetSerialNo,\n        assetSupplier: data.assetSupplier,\n        price: data.price,\n        deliveryDate: data.deliveryDate,\n        donorName: data.donorName,\n        projectName: data.projectName,\n        assetLocation: data.assetLocation,\n        roomNo: data.roomNo,\n        assetHolder: data.assetHolder,\n        assetAvailability:data.assetAvailability,\n        user_id: currentUser.user._id,\n      };\n    try {\n      await editAsset(registerData, id);\n      setTimeout(() => {\n        history.push(\"/manager\");\n      }, 1000);\n    } catch (e) {}\n  };\n  useEffect(() => {\n    getStatusList();\n    getCategoriesList();\n    getAssetFields();\n    console.log(assetDetails)\n  }, [currentUser]);\n  if (!currentUser) {\n    return <Redirect to={\"/\"} />;\n  }\n  // const todayDate = format(new Date(), \"yyyy-MM-dd\");\n  const todayDate = format(new Date(), \"yyyy-MM-dd\");\n  return (\n    <>\n      <div className=\"form--createevent\">\n        <div className=\"form__title d-flex justify-content-center mb-5 mt-5 \">\n          <h1>Edit an Asset</h1>\n        </div>\n        <div className=\"d-flex justify-content-center mb-5 mt-5\">\n          <Form\n            className=\"event-form col-md-10\"\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <Row>\n              <Col className=\"col-12 col-md-6\">\n             \n              <Form.Group controlId=\"assetCode\">\n                  <Form.Label>Asset Code</Form.Label>\n                  <Form.Control\n                  id=\"assetCode\"\n                    name=\"assetCode\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetCode}\n                    type=\"number\"\n                    ref={register({ required: true,      \n               \n                        pattern: {\n                          value: /^[0-9]+$/,\n                          message: \"Only Numbers\",\n                        }, })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.assetCode && errors.assetCode.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetCategory\">\n                  <Form.Label>Asset Category</Form.Label>\n                  <Form.Control\n                    name=\"assetCategory\"\n                    type=\"text\"\n                    onChange={handleChange}\n                    // defaultValue={assetDetails.assetCategory}\n                    value={assetDetails.assetCategory}\n                    as=\"select\"\n                    ref={register({\n                      required: true,\n                      validate: (value) => value !== \"Pick a Category\",\n                    })}\n                  >\n                    {/* <option>Pick a Category</option> */}\n                    {searchCategories.map((categories) => (\n                      <option value={categories._id}>\n                        {categories.assetCategory}\n                      </option>\n                    ))}\n                  </Form.Control>\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetCategory &&\n                      errors.assetCategory.type === \"validate\" && (\n                        <span>\n                          This field is required, select one of the Categories!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetDescription\">\n                  <Form.Label>Asset Description</Form.Label>\n                  <Form.Control\n                    as=\"textarea\"\n                    rows={1}\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetDescription}\n                    name=\"assetDescription\"\n                    placeholder=\"Asset Description...\"\n                    ref={register({\n                      required: true,\n                      minLength: 5,\n                      maxLength: 1200,\n                    })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"minLength\" && (\n                        <span>\n                          This field requires minimum length of 5 characters!\n                        </span>\n                      )}\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"maxLength\" && (\n                        <span>\n                          This field has limit of maximum of 1200 characters!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetModel\">\n                  <Form.Label>Asset Model</Form.Label>\n                  <Form.Control\n                    name=\"assetModel\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetModel}\n                    type=\"text\"\n                    placeholder=\"Asset Model...\"\n                    ref={register({ required: true, minLength: 3 })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetModel &&\n                      errors.assetModel.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetSerialNo\">\n                  <Form.Label>Asset Serial No.</Form.Label>\n                  <Form.Control\n                    name=\"assetSerialNo\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetSerialNo}\n                    type=\"text\"\n                    ref={register({ required: true, minLength: 3 })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.assetSerialNo && errors.assetSerialNo.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetSupplier\">\n                  <Form.Label>Asset Supplier</Form.Label>\n                  <Form.Control\n                    name=\"assetSupplier\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetSupplier}\n                    type=\"text\"\n                    placeholder=\"Asset Supplier...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetSupplier &&\n                      errors.assetSupplier.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n                </Form.Group>\n                \n                <Form.Group controlId=\"price\">\n                  <Form.Label>Asset Price</Form.Label>\n                  <Form.Control\n                  id=\"price\"\n                    name=\"price\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.price}\n                    type=\"number\"\n                    ref={register({ required: true,      \n               \n                        pattern: {\n                          value: /^[0-9]+$/,\n                          message: \"Only Numbers\",\n                        }, })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.price && errors.price.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                </Col>\n              <Col className=\"col-12 col-md-6\">\n\n                \n                <Form.Group controlId=\"deliveryDate\">\n                  <Form.Label>Delivery Date</Form.Label>\n                  <Form.Control\n                    name=\"deliveryDate\"\n                    type=\"date\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.deliveryDate}\n                    ref={register({\n                      required: true,\n                      validate: (value) => value <= todayDate,\n                    })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.deliveryDate &&\n                      errors.deliveryDate.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    {errors.deliveryDate &&\n                      errors.deliveryDate.type === \"validate\" && (\n                        <span>\n                          Starting date cant be earlier than tomorrow!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n                <Form.Group controlId=\"donorName\">\n                <Form.Label >Donor Name</Form.Label>\n                  <Form.Control\n                    name=\"donorName\"\n                    type=\"text\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.donorName}\n                    placeholder=\"Donor name...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.donorName &&\n                      errors.donorName.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"projectName\">\n                <Form.Label >Project Name</Form.Label>\n                  <Form.Control\n                    name=\"projectName\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.projectName}\n                    type=\"text\"\n                    placeholder=\"Project name...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.projectName &&\n                      errors.projectName.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"assetLocation\">\n                <Form.Label >Asset Location</Form.Label>\n                  <Form.Control\n                    name=\"assetLocation\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetLocation}\n                    type=\"text\"\n                    placeholder=\"Asset Location...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetLocation &&\n                      errors.assetLocation.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"roomNo\">\n                  <Form.Label>Room No.</Form.Label>\n                  <Form.Control\n                    name=\"roomNo\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.roomNo}\n                    type=\"text\"\n                    ref={register({ required: true, minLength: 1 })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.roomNo && errors.roomNo.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetHolder\">\n                <Form.Label >Asset Holder</Form.Label>\n                  <Form.Control\n                    name=\"assetHolder\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetHolder}\n                    type=\"text\"\n                    placeholder=\"Asset Holder...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetHolder &&\n                      errors.assetHolder.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"assetAvailability\">\n                  <Form.Label>Asset Status*</Form.Label>\n                  <Form.Control\n                    name=\"assetAvailability\"\n                    value={assetDetails.assetAvailability}\n                    onChange={handleChange}\n                    as=\"select\"\n                    ref={register({\n                      required: true,\n                      validate: (value) => value !== \"Pick a Location\",\n                    })}\n                  >\n                    {/* <option>Pick a Location</option> */}\n                    {status.map((locations) => (\n                      <option value={locations}>{locations}</option>\n                    ))}\n                  </Form.Control>\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetAvailability &&\n                      errors.assetAvailability.type === \"validate\" && (\n                        <span>\n                          This field is required, select one of the Locations!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n              </Col>\n\n\n                \n              <Col className=\"col-12 col-md-6\">\n                <Button\n                  className=\"btn-lg font-weight-bold\"\n                  variant=\"primary\"\n                  type=\"submit\"\n                >\n                  Edit Asset\n                </Button>\n              </Col>\n              \n            </Row>\n          </Form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default EditAsset;\n\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Assets\\EditAsset\\AdminEditAsset.jsx",["636","637","638","639","640","641","642"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {  getAsset } from \"../../../api/assets\";\nimport { editAsset} from \"../../../api/editAsset\";\nimport { useHistory, Redirect, useParams } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { format } from \"date-fns\";\nimport { getCategories, getStatus } from \"../../../api/filter\";\nimport { useSelector } from \"react-redux\";\nimport \"./style.scss\";\n\nfunction EditAsset() {\n    const history = useHistory();\n    let { id } = useParams();\n    const { user: currentUser } = useSelector((state) => state.auth);\n    const [showEditForm, setShowEditForm] = useState(false);\n    const [errMessage, setErrMessage] = useState(false);\n    const [assetDetails, setAssetDetails] = useState({});\n    const [searchCategories, setSearchCategories] = useState([]);\n    const [status, setStatus] = useState([]);\n    \n    const [successMessage, setSuccessMessage] = useState(false);\n    const getCategoriesList = async () => {\n      const response = await getCategories();\n      setSearchCategories(response);\n      console.log(response);\n    };\n    const getStatusList = async () => {\n      const response = await getStatus();\n      setStatus(response);\n    };\n    \n\n    const getAssetFields = async () => {\n      const response = await getAsset(id);\n      setAssetDetails((oldDetails) => ({\n        ...oldDetails,\n        assetNr: response.assetNr,\n        assetCode: response.assetCode,\n        assetCategory: response.assetCategory,\n        assetDescription: response.assetDescription,\n        assetModel: response.assetModel,\n        assetSerialNo: response.assetSerialNo,\n        assetSupplier: response.assetSupplier,\n        price: response.price,\n        deliveryDate: response.deliveryDate,\n        donorName: response.donorName,\n        projectName: response.projectName,\n        assetLocation: response.assetLocation,\n        roomNo: response.roomNo,\n        assetHolder: response.assetHolder,\n        assetAvailability:response.assetAvailability,\n      //  user_id: response.asset.user_id,\n    }));\n    setShowEditForm(true);\n  };\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setAssetDetails({ ...assetDetails, [name]: value });\n  };\n  const { register, handleSubmit, errors } = useForm();\n  const onSubmit = async (data,e) => {\n    const registerData = {\n      assetCode:data.assetCode,\n        assetCategory: data.assetCategory,\n        assetDescription: data.assetDescription,\n        assetModel: data.assetModel,\n        assetSerialNo: data.assetSerialNo,\n        assetSupplier: data.assetSupplier,\n        price: data.price,\n        deliveryDate: data.deliveryDate,\n        donorName: data.donorName,\n        projectName: data.projectName,\n        assetLocation: data.assetLocation,\n        roomNo: data.roomNo,\n        assetHolder: data.assetHolder,\n        assetAvailability:data.assetAvailability,\n        user_id: currentUser.user._id,\n      };\n      try {\n        await editAsset(registerData, id);\n        setTimeout(() => {\n          history.push(\"/admin\");\n        }, 1000);\n      } catch (e) {}\n    };\n\n \n  useEffect(() => {\n    getStatusList();\n    getCategoriesList();\n    getAssetFields();\n  }, [currentUser]);\n  if (!currentUser) {\n    return <Redirect to={\"/\"} />;\n  }\n  const todayDate = format(new Date(), \"yyyy-MM-dd\");\n\n  return (\n    <>\n      <div className=\"form--createevent\">\n        <div className=\"form__title d-flex justify-content-center mb-5 mt-5 \">\n          <h1>Edit an Asset</h1>\n        </div>\n        <div className=\"d-flex justify-content-center mb-5 mt-5\">\n          <Form\n            className=\"event-form col-md-10\"\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <Row>\n              <Col className=\"col-12 col-md-6\">\n              <Form.Group controlId=\"assetCode\">\n                  <Form.Label>Asset Code</Form.Label>\n                  <Form.Control\n                  id=\"assetCode\"\n                    name=\"assetCode\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetCode}\n                    type=\"number\"\n                    ref={register({ required: true,      \n               \n                        pattern: {\n                          value: /^[0-9]+$/,\n                          message: \"Only Numbers\",\n                        }, })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.assetCode && errors.assetCode.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetCategory\">\n                  <Form.Label>Asset Category</Form.Label>\n                  <Form.Control\n                    name=\"assetCategory\"\n                    type=\"text\"\n                    onChange={handleChange}\n                    // defaultValue={assetDetails.assetCategory}\n                    value={assetDetails.assetCategory}\n                    as=\"select\"\n                    ref={register({\n                      required: true,\n                      validate: (value) => value !== \"Pick a Category\",\n                    })}\n                  >\n                    {/* <option>Pick a Category</option> */}\n                    {searchCategories.map((categories) => (\n                      <option value={categories._id}>\n                        {categories.assetCategory}\n                      </option>\n                    ))}\n                  </Form.Control>\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetCategory &&\n                      errors.assetCategory.type === \"validate\" && (\n                        <span>\n                          This field is required, select one of the Categories!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetDescription\">\n                  <Form.Label>Asset Description</Form.Label>\n                  <Form.Control\n                    as=\"textarea\"\n                    rows={1}\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetDescription}\n                    name=\"assetDescription\"\n                    placeholder=\"Asset Description...\"\n                    ref={register({\n                      required: true,\n                      minLength: 5,\n                      maxLength: 1200,\n                    })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"minLength\" && (\n                        <span>\n                          This field requires minimum length of 5 characters!\n                        </span>\n                      )}\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"maxLength\" && (\n                        <span>\n                          This field has limit of maximum of 1200 characters!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetModel\">\n                  <Form.Label>Asset Model</Form.Label>\n                  <Form.Control\n                    name=\"assetModel\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetModel}\n                    type=\"text\"\n                    placeholder=\"Asset Model...\"\n                    ref={register({ required: true, minLength: 3 })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetModel &&\n                      errors.assetModel.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetSerialNo\">\n                  <Form.Label>Asset Serial No.</Form.Label>\n                  <Form.Control\n                    name=\"assetSerialNo\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetSerialNo}\n                    type=\"number\"\n                    type=\"text\"\n                    ref={register({ required: true, minLength: 3 })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.assetSerialNo && errors.assetSerialNo.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetSupplier\">\n                  <Form.Label>Asset Supplier</Form.Label>\n                  <Form.Control\n                    name=\"assetSupplier\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetSupplier}\n                    type=\"text\"\n                    placeholder=\"Asset Supplier...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetSupplier &&\n                      errors.assetSupplier.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n                </Form.Group>\n                \n                <Form.Group controlId=\"price\">\n                  <Form.Label>Asset Price</Form.Label>\n                  <Form.Control\n                  id=\"price\"\n                    name=\"price\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.price}\n                    type=\"number\"\n                    ref={register({ required: true,      \n               \n                        pattern: {\n                          value: /^[0-9]+$/,\n                          message: \"Only Numbers\",\n                        }, })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.price && errors.price.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                    </Form.Group>\n                    </Col>\n              <Col className=\"col-12 col-md-6\">\n                <Form.Group controlId=\"deliveryDate\">\n                  <Form.Label>Delivery Date</Form.Label>\n                  <Form.Control\n                    name=\"deliveryDate\"\n                    type=\"date\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.deliveryDate}\n                    \n                    id=\"deliveryDate\"\n                    ref={register({\n                      required: true,\n                      validate: (value) => value <= todayDate,\n                    })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.deliveryDate &&\n                      errors.deliveryDate.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    {errors.deliveryDate &&\n                      errors.deliveryDate.type === \"validate\" && (\n                        <span>\n                          Starting date cant be earlier than tomorrow!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n                <Form.Group controlId=\"donorName\">\n                <Form.Label >Donor Name</Form.Label>\n                  <Form.Control\n                    name=\"donorName\"\n                    type=\"text\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.donorName}\n                    placeholder=\"Donor name...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.donorName &&\n                      errors.donorName.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"projectName\">\n                <Form.Label >Project Name</Form.Label>\n                  <Form.Control\n                    name=\"projectName\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.projectName}\n                    type=\"text\"\n                    placeholder=\"Project name...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.projectName &&\n                      errors.projectName.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"assetLocation\">\n                <Form.Label >Asset Location</Form.Label>\n                  <Form.Control\n                    name=\"assetLocation\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetLocation}\n                    type=\"text\"\n                    placeholder=\"Asset Location...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetLocation &&\n                      errors.assetLocation.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"roomNo\">\n                  <Form.Label>Room No.</Form.Label>\n                  <Form.Control\n                    name=\"roomNo\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.roomNo}\n                    type=\"text\"\n                    ref={register({ required: true, minLength: 1 })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.roomNo && errors.roomNo.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetHolder\">\n                <Form.Label >Asset Holder</Form.Label>\n                  <Form.Control\n                    name=\"assetHolder\"\n                    onChange={handleChange}\n                    defaultValue={assetDetails.assetHolder}\n                    type=\"text\"\n                    placeholder=\"Asset Holder...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetHolder &&\n                      errors.assetHolder.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"assetAvailability\">\n                  <Form.Label>Asset Status*</Form.Label>\n                  <Form.Control\n                    name=\"assetAvailability\"\n                    value={assetDetails.assetAvailability}\n                    onChange={handleChange}\n                    as=\"select\"\n                    ref={register({\n                      required: true,\n                      validate: (value) => value !== \"Pick a Location\",\n                    })}\n                  >\n                    {/* <option>Pick a Location</option> */}\n                    {status.map((locations) => (\n                      <option value={locations}>{locations}</option>\n                    ))}\n                  </Form.Control>\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetAvailability &&\n                      errors.assetAvailability.type === \"validate\" && (\n                        <span>\n                          This field is required, select one of the Locations!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n              </Col>\n\n\n                \n              <Col className=\"col-12 col-md-6\">\n                <Button\n                  className=\"btn-lg font-weight-bold\"\n                  variant=\"primary\"\n                  type=\"submit\"\n                >\n                  Edit Asset\n                </Button>\n              </Col>\n             \n            </Row>\n          </Form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default EditAsset;\n\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\reducers\\index.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\api\\assets.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\api\\editAsset.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\listItems.jsx",["643","644"],"import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport GroupIcon from \"@material-ui/icons/Group\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport BusinessIcon from \"@material-ui/icons/Business\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport CategoryIcon from \"@material-ui/icons/Category\";\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport SupervisorAccountIcon from \"@material-ui/icons/SupervisorAccount\";\r\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logout } from \"../../actions/auth\";\r\n// css\r\nimport \"./Dashboard.scss\";\r\n\r\nconst MainListItems = () => {\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n  const logOut = () => {\r\n    dispatch(logout());\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        <ListSubheader inset style={{ color: \"#fff\" , paddingLeft:25 }}>\r\n          Admin Dashboard\r\n        </ListSubheader>\r\n        <NavLink to=\"/admin\" className=\"admin__links\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <DashboardIcon className=\"color--white\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Dashboard\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        <NavLink to=\"/admin/categories\" className=\"admin__links\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <CategoryIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Categories\" />\r\n          </ListItem>\r\n        </NavLink>\r\n\r\n        <NavLink to=\"/admin/admins\" className=\"admin__links\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <SupervisorAccountIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Admins\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        <NavLink to=\"/admin/managers\" className=\"admin__links\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <BusinessIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Managers\" />\r\n          </ListItem>\r\n        </NavLink>\r\n\r\n        <NavLink to=\"/admin/users\" className=\"admin__links\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <GroupIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Users\" />\r\n          </ListItem>\r\n        </NavLink>\r\n\r\n      \r\n\r\n       \r\n\r\n        <Divider style={{ backgroundColor: \"#fff\" }} />\r\n      </div>\r\n      <div>\r\n        \r\n       \r\n        <Divider style={{ backgroundColor: \"#fff\" }} />\r\n        <ListSubheader inset style={{ color: \"#fff\" , paddingLeft:25}}>\r\n          Profile\r\n        </ListSubheader>\r\n        <NavLink\r\n          to={`/admins/editprofile/${currentUser.user._id}`}\r\n          className=\"admin__links\"\r\n        >\r\n       <ListItem button>\r\n            <ListItemIcon>\r\n              <AccountBoxIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Edit Profile\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        <NavLink to=\"/login\" className=\"admin__links\" onClick={logOut}>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <ExitToAppIcon className=\"color--white\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Log Out\" />\r\n          </ListItem>\r\n        </NavLink>\r\n\r\n        {/* <ListItem button>\r\n      <ListItemIcon>\r\n        <HighlightOffIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Declined Requests\" />\r\n    </ListItem> */}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainListItems;\r\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\reducers\\auth.js",["645"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\reducers\\message.js",["646"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\api\\register.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\actions\\auth.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\actions\\types.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\api\\login.js",["647"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\api\\role.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\MangerDashboard\\listItems.jsx",["648","649"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Assets\\AddAsset\\AddAsset.jsx",["650","651","652","653","654","655"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\nimport { addAsset } from \"../../../api/assets\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { format } from \"date-fns\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { getCategories, getStatus } from \"../../../api/filter\";\nimport { useSelector } from \"react-redux\";\nimport \"./AddAsset.scss\";\n\nfunction AddAsset() {\n  const history = useHistory();\n  const { user: currentUser } = useSelector((state) => state.auth);\n  const [errMessage, setErrMessage] = useState(false);\n  const [successMessage, setSuccessMessage] = useState(false);\n  const [searchCategories, setSearchCategories] = useState([]);\n  const [status, setStatus] = useState([]);\n  const { register, handleSubmit, errors } = useForm();\n  \n  const getCategoriesList = async () => {\n    const response = await getCategories();\n    setSearchCategories(response);\n    console.log(response);\n  };\n  const getStatusList = async () => {\n    const response = await getStatus();\n    setStatus(response);\n  };\n  \n  const onSubmit = async (data, e) => {\n    const registerData = {\n      // assetNr: data.assetNr,\n      // assetOldNr: data.assetOldNr,\n      assetCode:data.assetCode,\n      assetCategory: data.assetCategory,\n      assetDescription: data.assetDescription,\n      assetModel: data.assetModel,\n      assetSerialNo: data.assetSerialNo,\n      assetSupplier: data.assetSupplier,\n      price: data.price,\n      deliveryDate: data.deliveryDate,\n      donorName: data.donorName,\n      projectName: data.projectName,\n      assetLocation: data.assetLocation,\n      roomNo: data.roomNo,\n      assetHolder: data.assetHolder,\n      assetAvailability:data.assetAvailability,\n      user_id: currentUser.user._id,\n    };\n    \n    try {\n      const response = await addAsset(registerData);\n      console.log(\"Form has been submitted\");\n      setErrMessage(response.errMessage);\n      setSuccessMessage(response.successMessage);\n      e.target.reset();\n      setTimeout(() => {\n        history.push(\"/manager\");\n      }, 2000);\n    } catch (e) { console.log(\"Form has not been submitted\");}\n  };\n  useEffect(() => {\n    getStatusList();\n    getCategoriesList();\n  }, [currentUser]);\n  if (!currentUser) {\n    return <Redirect to={\"/\"} />;\n  }\n  const todayDate = format(new Date(), \"yyyy-MM-dd\");\n  return (\n    <>\n      {/* <CompanyDashboard /> */}\n      <div className=\"create__event \">\n        <div className=\"event__container\">\n          <h1>Add an Asset</h1>\n        </div>\n        <div className=\"event__container\">\n          {errMessage && <Alert severity=\"error\">{errMessage}</Alert>}\n          {successMessage && <Alert severity=\"success\">{successMessage}</Alert>}\n        </div>\n        <div className=\"event__container\">\n          <Form\n            className=\"event__form col-md-10\"\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <Row>\n              <Col className=\"col-12 col-md-6\">\n              <Form.Group controlId=\"assetCode\">\n                  <Form.Label>Asset Code</Form.Label>\n                  <Form.Control\n                  id=\"assetCode\"\n                    name=\"assetCode\"\n                    placeholder=\"Asset Code...\"\n                    type=\"number\"\n                    ref={register({ required: true,      \n               \n                        pattern: {\n                          value: /^[0-9]+$/,\n                          message: \"Only Numbers\",\n                        }, })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.assetCode && errors.assetCode.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n               \n              <Form.Group controlId=\"assetCategory\">\n                  <Form.Label>Asset Category</Form.Label>\n                  <Form.Control\n                    name=\"assetCategory\"\n                    as=\"select\"\n                    ref={register({\n                      required: true,\n                      validate: (value) => value !== \"Pick a Category\",\n                    })}\n                  >\n                    <option>Pick a Category</option>\n                    {searchCategories.map((categories) => (\n                      <option name=\"categories\" value={categories._id}>\n                        {\" \"}\n                        {categories.assetCategory}\n                      </option>\n                    ))}\n                  </Form.Control>\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetCategory &&\n                      errors.assetCategory.type === \"validate\" && (\n                        <span>\n                          This field is required, select one of the Categories!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n                {/* <Form.Group controlId=\"assetCategory\">\n                  <Form.Label>Asset Category</Form.Label>\n                  <Form.Control\n                    name=\"assetCategory\"\n                    type=\"text\"\n                    id=\"assetCategory\"\n                    placeholder=\"Asset Category...\"\n                    ref={register({ required: true,      \n                    })}\n                  />\n                    \n               \n                    <p style={{ color: \"rdelied\" }}>\n                      &#8203;\n                      {errors.assetCategory && errors.assetCategory.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group> */}\n\n                <Form.Group controlId=\"assetDescription\">\n                  <Form.Label>Asset Description</Form.Label>\n                  <Form.Control\n                    as=\"textarea\"\n                    rows={1}\n                    id=\"assetDescription\"\n                    name=\"assetDescription\"\n                    placeholder=\"Asset Description...\"\n                    ref={register({\n                      required: true,\n                      minLength: 5,\n                      maxLength: 1200,\n                    })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"minLength\" && (\n                        <span>\n                          This field requires minimum length of 5 characters!\n                        </span>\n                      )}\n                    {errors.assetDescription &&\n                      errors.assetDescription.type === \"maxLength\" && (\n                        <span>\n                          This field has limit of maximum of 1200 characters!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n              \n              <Form.Group controlId=\"assetModel\">\n                  <Form.Label>Asset Model</Form.Label>\n                  <Form.Control\n                    name=\"assetModel\"\n                    id=\"assetModel\"\n                    type=\"text\"\n                    placeholder=\"Asset Model...\"\n                    ref={register({ required: true, minLength: 3 })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetModel &&\n                      errors.assetModel.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n                </Form.Group>\n\n                <Form.Group controlId=\"assetSerialNo\">\n                  <Form.Label>Asset Serial No.</Form.Label>\n                  <Form.Control\n                    name=\"assetSerialNo\"\n                    id=\"assetSerialNo\"\n                    placeholder=\"Asset Serial No....\"\n                    type=\"text\"\n                    ref={register({ required: true, minLength: 3 })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.assetSerialNo && errors.assetSerialNo.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n\n                <Form.Group controlId=\"assetSupplier\">\n                  <Form.Label>Asset Supplier</Form.Label>\n                  <Form.Control\n                    name=\"assetSupplier\"\n                    id=\"assetSupplier\"\n                    type=\"text\"\n                    placeholder=\"Asset Supplier...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetSupplier &&\n                      errors.assetSupplier.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n                </Form.Group>\n                \n                <Form.Group controlId=\"price\">\n                  <Form.Label>Asset Price</Form.Label>\n                  <Form.Control\n                  id=\"price\"\n                    name=\"price\"\n                    placeholder=\"Asset Price...\"\n                    type=\"number\"\n                    ref={register({ required: true,      \n               \n                        pattern: {\n                          value: /^[0-9]+$/,\n                          message: \"Only Numbers\",\n                        }, })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.price && errors.price.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                </Col>\n              <Col className=\"col-12 col-md-6\">\n\n                <Form.Group controlId=\"deliveryDate\">\n                  <Form.Label>Delivery Date</Form.Label>\n                  <Form.Control\n                    name=\"deliveryDate\"\n                    type=\"date\"\n                    id=\"deliveryDate\"\n                    id=\"deliveryDate\"\n                    ref={register({\n                      required: true,\n                      validate: (value) => value <= todayDate,\n                    })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.deliveryDate &&\n                      errors.deliveryDate.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    {errors.deliveryDate &&\n                      errors.deliveryDate.type === \"validate\" && (\n                        <span>\n                          Starting date cant be earlier than tomorrow!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n                \n                <Form.Group controlId=\"donorName\">\n                <Form.Label >Donor Name</Form.Label>\n                  <Form.Control\n                    name=\"donorName\"\n                    type=\"text\"\n                    id=\"donorName\"\n                    placeholder=\"Donor name...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.donorName &&\n                      errors.donorName.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"projectName\">\n                <Form.Label >Project Name</Form.Label>\n                  <Form.Control\n                    name=\"projectName\"\n                    id=\"projectName\"\n                    type=\"text\"\n                    placeholder=\"Project name...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.projectName &&\n                      errors.projectName.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"assetLocation\">\n                <Form.Label >Asset Location</Form.Label>\n                  <Form.Control\n                    name=\"assetLocation\"\n                    id=\"assetLocation\"\n                    type=\"text\"\n                    placeholder=\"Asset Location...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetLocation &&\n                      errors.assetLocation.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"roomNo\">\n                  <Form.Label>Room No.</Form.Label>\n                  <Form.Control\n                    name=\"roomNo\"\n                    id=\"roomNo\"\n                    placeholder=\"Room No...\"\n                    type=\"text\"\n                    ref={register({ required: true, minLength: 1 })}\n                  ></Form.Control>\n\n                    <p style={{ color: \"red\" }}>\n                      &#8203;\n                      {errors.roomNo && errors.roomNo.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                    </p>\n                </Form.Group>\n                <Form.Group controlId=\"assetHolder\">\n                <Form.Label >Asset Holder</Form.Label>\n                  <Form.Control\n                    name=\"assetHolder\"\n                    id=\"assetHolder\"\n                    type=\"text\"\n                    placeholder=\"Asset Holder...\"\n                    ref={register({ required: true })}\n                  />\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetHolder &&\n                      errors.assetHolder.type === \"required\" && (\n                        <span>This field is required!</span>\n                      )}\n                  </p>\n\n                </Form.Group>\n                <Form.Group controlId=\"assetAvailability\">\n                  <Form.Label>Asset Status</Form.Label>\n                  <Form.Control\n                    name=\"assetAvailability\"\n                    as=\"select\"\n                    ref={register({\n                      required: true,\n                      validate: (value) => value !== \"Asset state\",\n                    })}\n                  >\n                    <option>Asset state</option>\n                    {status.map((stateStatus) => (\n                      <option value={stateStatus}>{stateStatus}</option>\n                    ))}\n                  </Form.Control>\n                  <p style={{ color: \"red\" }}>\n                    &#8203;\n                    {errors.assetAvailability &&\n                      errors.assetAvailability.type === \"validate\" && (\n                        <span>\n                          This field is required, select one of the states!\n                        </span>\n                      )}\n                  </p>\n                </Form.Group>\n                \n              </Col>\n\n              <Col className=\"col-12 col-md-6\">\n                <Button\n                  className=\"create__form--submit btn-lg font-weight-bold\" \n                  variant=\"primary\"\n                  type=\"submit\"\n                >\n                  Add\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AddAsset;\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\MangerDashboard\\Tables\\AllAssetsTable.jsx",["656","657","658","659","660","661","662","663"],"\r\nimport React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { Link ,Redirect} from \"react-router-dom\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {getAssets} from \"../../../api/assets\";\r\nimport { getCategories } from \"../../../api/filter\";\r\n\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"assetNr\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"No.\",\r\n  },\r\n  {\r\n    id: \"assetCode\",\r\n     numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Code\",\r\n  },\r\n \r\n  {\r\n    id: \"assetCategory\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Category\",\r\n  },\r\n  {\r\n    id: \"assetDescription\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Description\",\r\n  },\r\n  {\r\n    id: \"assetModel\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Model\",\r\n  },\r\n  {\r\n    id: \"assetSerialNo\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Serial no.\",\r\n  },\r\n  {\r\n    id: \"assetSupplier\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Supplier\",\r\n  },\r\n  {\r\n    id: \"price\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Price\",\r\n  }, \r\n  {\r\n    id: \"deliveryDate\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Delivery date\",\r\n  },\r\n  {\r\n    id: \"publishDate\",\r\n     numeric: \"left\",\r\n    disablePadding: false,\r\n    label: \"Publish date\",\r\n  },\r\n  \r\n  {\r\n    id: \"donorName\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Donor\",\r\n  },\r\n  {\r\n    id: \"projectName\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Project Name\",\r\n  },\r\n  {\r\n    id: \"assetLocation\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Location\",\r\n  },\r\n  {\r\n    id: \"roomNo\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Room no.\",\r\n  },\r\n  {\r\n    id: \"assetHolder\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Holder\",\r\n  },\r\n  {\r\n    id: \"assetAvailability\",\r\n    numeric: \"center\",\r\n    disablePadding: false,\r\n    label: \"Status\",\r\n  },\r\n\r\n  \r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}>\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}>\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}>\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\">\r\n          All Assets\r\n        </Typography>\r\n      )}\r\n\r\n      {/* {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        \"\"\r\n      )} */}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function AssetsTable() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  // const { user: currentUser } = useSelector((state) => state.auth);\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"name\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  // const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [asset, setAssets] = React.useState([]);\r\n  const [searchCategories, setSearchCategories] = React.useState([]);\r\n\r\n  \r\n\r\n  const getAssetsList = async () => {\r\n    const response = await getAssets(currentUser.user._id);\r\n\r\n    setAssets(response);\r\n  };\r\n\r\n  const getCategoriesList = async () => {\r\n    const response = await getCategories();\r\n    setSearchCategories(response);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAssetsList();\r\n    getCategoriesList();\r\n  }, []);\r\n\r\n  \r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  \r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  \r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, asset.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        sm={12}\r\n        md={12}\r\n        component={Paper}\r\n        className={classes.paper}\r\n      >\r\n        <EnhancedTableToolbar numSelected={selected.length} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={asset.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(asset, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((asset, index) => {\r\n                  const isItemSelected = isSelected(asset.title);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(e) => handleClick(e, asset.title)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={asset._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ \"aria-labelledby\": labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                        align=\"center\"\r\n                      >\r\n                        {asset.assetNr}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{asset.assetCode}</TableCell>\r\n                      {searchCategories.map((category) =>\r\n                      asset.assetCategory === category._id ? (\r\n                        <TableCell align=\"center\">\r\n                          {category.assetCategory}\r\n                        </TableCell>\r\n                      ) : null\r\n                    )}\r\n                      <TableCell align=\"center\">{asset.assetDescription}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetModel}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetSerialNo}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetSupplier}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.price.toFixed(2)}€{\" \"}\r\n                       </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.deliveryDate.split(\"T\")[0]}\r\n                        </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {asset.publishDate.split(\"T\")[0]}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{asset.donorName}</TableCell>\r\n                      <TableCell align=\"center\">{asset.projectName}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetLocation}</TableCell>\r\n                      <TableCell align=\"center\">{asset.roomNo}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetHolder}</TableCell>\r\n                      <TableCell align=\"center\">{asset.assetAvailability}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ emptyRows }}>\r\n                  {/* <TableCell colSpan={6} /> */}\r\n                  <Divider />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10]}\r\n          component=\"div\"\r\n          count={asset.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\Tables\\AdminTable.jsx",["664","665","666","667","668","669"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\Tables\\AssetsTable.jsx",["670","671"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\api\\filter.js",[],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\AdminDashboard\\Tables\\CategoryTable.jsx",["672","673","674","675"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport {\r\n  getCategories,\r\n  deleteCategories,\r\n  addCategory,\r\n} from \"../../../api/filter\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"eventCategory\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Asset Category\",\r\n  },\r\n  {\r\n    id: \"deleteCategory\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Delete\",\r\n  },\r\n];\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (category) => {\r\n    onRequestSort(category, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}>\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}>\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}>\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"></Typography>\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  form: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n    display: \"flex\",\r\n  },\r\n\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function CategoryTable() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"name\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  // const [errors, setErrors] = useState({});\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [categories, setCategories] = React.useState([]);\r\n  const [categoryText, setCategoryText] = React.useState(\"\");\r\n\r\n  const getCategoriesList = async () => {\r\n    const response = await getCategories();\r\n    setCategories(response);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCategoriesList();\r\n  }, []);\r\n\r\n  const handleDelete = async (id) => {\r\n    const deleteuser = {\r\n      user_id: currentUser.user._id,\r\n      adm_id: currentUser.user.role_id,\r\n    };\r\n    try {\r\n      await deleteCategories(id, deleteuser);\r\n\r\n      console.log(\"Category has been deleted!\");\r\n      setTimeout(() => {\r\n        history.go(\"/admin/categories\");\r\n      }, 500);\r\n    } catch (e) {}\r\n  };\r\n\r\n  const handleRequestSort = (category, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (category) => {\r\n    if (category.target.checked) {\r\n      const newSelecteds = categories.map((n) => n.eventCategory);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (category, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setCategoryText(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    const category = {\r\n      assetCategory: categoryText,\r\n      user_id: currentUser.user._id,\r\n      adm_id: currentUser.user.role_id,\r\n    };\r\n\r\n    console.log(categoryText);\r\n    try {\r\n      await addCategory(category);\r\n      setCategoryText(\"\");\r\n      setTimeout(() => {\r\n        history.go(\"/admin/categories\");\r\n      }, 1000);\r\n    } catch (e) {}\r\n  };\r\n  // const validate = (category) => {\r\n  //   const errors = {};\r\n  //   if (!category.eventCategory) {\r\n  //     errors.eventCategory = \"Check name\";\r\n  //   } else if (\r\n  //     !/^[a-zA-Z\\s]*$/i.test(category.eventCategory) ||\r\n  //     category.eventCategory.length < 3\r\n  //   ) {\r\n  //     errors.name = \"Category must be as least 3 characters long!\";\r\n  //   }\r\n  //   return errors;\r\n  // };\r\n  const handleChangePage = (category, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (category) => {\r\n    setRowsPerPage(parseInt(category.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, categories.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <form className={classes.form} noValidate autoComplete=\"off\">\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"Add Category\"\r\n          value={categoryText}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          onChange={(e) => handleChange(e)}\r\n        />\r\n        {/* {errors.categoryText && (\r\n          <p className=\"error__message\">\r\n            Category must be as least 3 characters long!\r\n          </p>\r\n        )} */}\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => handleSubmit()}>\r\n          ADD\r\n        </Button>\r\n      </form>\r\n      <EnhancedTableToolbar numSelected={selected.length} />\r\n      <TableContainer>\r\n        <Table\r\n          className={classes.table}\r\n          aria-labelledby=\"tableTitle\"\r\n          size=\"medium\"\r\n          aria-label=\"enhanced table\">\r\n          <EnhancedTableHead\r\n            classes={classes}\r\n            numSelected={selected.length}\r\n            order={order}\r\n            orderBy={orderBy}\r\n            onSelectAllClick={handleSelectAllClick}\r\n            onRequestSort={handleRequestSort}\r\n            rowCount={categories.length}\r\n          />\r\n          <TableBody>\r\n            {stableSort(categories, getComparator(order, orderBy))\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((category, index) => {\r\n                const isItemSelected = isSelected(category.eventCategory);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onClick={(e) => handleClick(e, category.assetCategory)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={category.id}\r\n                    selected={isItemSelected}>\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        checked={isItemSelected}\r\n                        inputProps={{ \"aria-labelledby\": labelId }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      component=\"th\"\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      padding=\"none\">\r\n                      {category.assetCategory}\r\n                    </TableCell>\r\n                    {/* <TableCell align=\"left\">{category._id}</TableCell> */}\r\n\r\n                    {/* <TableCell align=\"right\">\r\n                        <Link to={`/admin/editcategories/${category._id}`}>\r\n                          <IconButton\r\n                            aria-label=\"delete\"\r\n                            className=\"edit_button\"\r\n                          >\r\n                            <EditIcon className=\"edit_icon\" />\r\n                          </IconButton>\r\n                        </Link>\r\n                      </TableCell> */}\r\n                    <TableCell align=\"center\">\r\n                      <IconButton\r\n                        onClick={() => {\r\n                          if (window.confirm(\"Delete the event?\")) {\r\n                            handleDelete(category._id);\r\n                          }\r\n                        }}\r\n                        className=\"delete_button\"\r\n                        aria-label=\"delete\">\r\n                        <DeleteIcon className=\"delete_icon\" />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            {emptyRows > 0 && (\r\n              <TableRow style={{ emptyRows }}>\r\n                <TableCell colSpan={6} />\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[5, 10]}\r\n        component=\"div\"\r\n        count={categories.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Charts\\testChart.jsx",["676","677","678","679","680","681","682"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Charts\\TestChart.jsx",["683","684","685","686","687"],"C:\\Users\\leutr\\OneDrive\\Documents\\GitHub\\DAMS\\dams_client\\src\\components\\Charts\\Testing.jsx",["688","689","690","691","692","693","694","695"],{"ruleId":"696","replacedBy":"697"},{"ruleId":"698","replacedBy":"699"},{"ruleId":"700","severity":1,"message":"701","line":70,"column":30,"nodeType":"702","messageId":"703","endLine":70,"endColumn":40},{"ruleId":"700","severity":1,"message":"704","line":2,"column":10,"nodeType":"702","messageId":"703","endLine":2,"endColumn":21},{"ruleId":"700","severity":1,"message":"705","line":120,"column":9,"nodeType":"702","messageId":"703","endLine":120,"endColumn":16},{"ruleId":"700","severity":1,"message":"706","line":122,"column":20,"nodeType":"702","messageId":"703","endLine":122,"endColumn":31},{"ruleId":"700","severity":1,"message":"707","line":123,"column":9,"nodeType":"702","messageId":"703","endLine":123,"endColumn":13},{"ruleId":"700","severity":1,"message":"708","line":3,"column":22,"nodeType":"702","messageId":"703","endLine":3,"endColumn":26},{"ruleId":"700","severity":1,"message":"709","line":44,"column":10,"nodeType":"702","messageId":"703","endLine":44,"endColumn":22},{"ruleId":"700","severity":1,"message":"710","line":45,"column":22,"nodeType":"702","messageId":"703","endLine":45,"endColumn":35},{"ruleId":"700","severity":1,"message":"711","line":47,"column":26,"nodeType":"702","messageId":"703","endLine":47,"endColumn":43},{"ruleId":"712","severity":1,"message":"713","line":80,"column":6,"nodeType":"714","endLine":80,"endColumn":19,"suggestions":"715"},{"ruleId":"700","severity":1,"message":"716","line":1,"column":28,"nodeType":"702","messageId":"703","endLine":1,"endColumn":36},{"ruleId":"717","severity":1,"message":"718","line":13,"column":1,"nodeType":"719","endLine":38,"endColumn":2},{"ruleId":"717","severity":1,"message":"718","line":5,"column":1,"nodeType":"719","endLine":18,"endColumn":2},{"ruleId":"696","replacedBy":"720"},{"ruleId":"698","replacedBy":"721"},{"ruleId":"717","severity":1,"message":"722","line":25,"column":1,"nodeType":"719","endLine":28,"endColumn":3},{"ruleId":"696","replacedBy":"723"},{"ruleId":"698","replacedBy":"724"},{"ruleId":"700","severity":1,"message":"725","line":9,"column":8,"nodeType":"702","messageId":"703","endLine":9,"endColumn":12},{"ruleId":"700","severity":1,"message":"726","line":14,"column":8,"nodeType":"702","messageId":"703","endLine":14,"endColumn":19},{"ruleId":"700","severity":1,"message":"727","line":16,"column":8,"nodeType":"702","messageId":"703","endLine":16,"endColumn":23},{"ruleId":"700","severity":1,"message":"728","line":25,"column":10,"nodeType":"702","messageId":"703","endLine":25,"endColumn":22},{"ruleId":"700","severity":1,"message":"729","line":26,"column":9,"nodeType":"702","messageId":"703","endLine":26,"endColumn":22},{"ruleId":"700","severity":1,"message":"705","line":120,"column":9,"nodeType":"702","messageId":"703","endLine":120,"endColumn":16},{"ruleId":"700","severity":1,"message":"706","line":122,"column":20,"nodeType":"702","messageId":"703","endLine":122,"endColumn":31},{"ruleId":"700","severity":1,"message":"707","line":123,"column":9,"nodeType":"702","messageId":"703","endLine":123,"endColumn":13},{"ruleId":"717","severity":1,"message":"718","line":5,"column":1,"nodeType":"719","endLine":18,"endColumn":2},{"ruleId":"717","severity":1,"message":"718","line":13,"column":1,"nodeType":"719","endLine":38,"endColumn":2},{"ruleId":"717","severity":1,"message":"722","line":25,"column":1,"nodeType":"719","endLine":28,"endColumn":3},{"ruleId":"700","severity":1,"message":"730","line":7,"column":8,"nodeType":"702","messageId":"703","endLine":7,"endColumn":17},{"ruleId":"700","severity":1,"message":"731","line":8,"column":8,"nodeType":"702","messageId":"703","endLine":8,"endColumn":12},{"ruleId":"700","severity":1,"message":"732","line":9,"column":8,"nodeType":"702","messageId":"703","endLine":9,"endColumn":18},{"ruleId":"700","severity":1,"message":"733","line":10,"column":10,"nodeType":"702","messageId":"703","endLine":10,"endColumn":20},{"ruleId":"700","severity":1,"message":"734","line":12,"column":8,"nodeType":"702","messageId":"703","endLine":12,"endColumn":13},{"ruleId":"735","severity":1,"message":"736","line":216,"column":21,"nodeType":"737","endLine":216,"endColumn":38},{"ruleId":"700","severity":1,"message":"716","line":1,"column":28,"nodeType":"702","messageId":"703","endLine":1,"endColumn":36},{"ruleId":"700","severity":1,"message":"738","line":19,"column":8,"nodeType":"702","messageId":"703","endLine":19,"endColumn":18},{"ruleId":"700","severity":1,"message":"739","line":20,"column":8,"nodeType":"702","messageId":"703","endLine":20,"endColumn":18},{"ruleId":"700","severity":1,"message":"740","line":21,"column":8,"nodeType":"702","messageId":"703","endLine":21,"endColumn":16},{"ruleId":"700","severity":1,"message":"741","line":24,"column":11,"nodeType":"702","messageId":"703","endLine":24,"endColumn":22},{"ruleId":"700","severity":1,"message":"742","line":24,"column":24,"nodeType":"702","messageId":"703","endLine":24,"endColumn":40},{"ruleId":"700","severity":1,"message":"708","line":25,"column":22,"nodeType":"702","messageId":"703","endLine":25,"endColumn":26},{"ruleId":"700","severity":1,"message":"743","line":25,"column":28,"nodeType":"702","messageId":"703","endLine":25,"endColumn":36},{"ruleId":"700","severity":1,"message":"744","line":295,"column":9,"nodeType":"702","messageId":"703","endLine":295,"endColumn":16},{"ruleId":"700","severity":1,"message":"745","line":296,"column":17,"nodeType":"702","messageId":"703","endLine":296,"endColumn":28},{"ruleId":"700","severity":1,"message":"746","line":114,"column":9,"nodeType":"702","messageId":"703","endLine":114,"endColumn":25},{"ruleId":"700","severity":1,"message":"747","line":11,"column":8,"nodeType":"702","messageId":"703","endLine":11,"endColumn":22},{"ruleId":"700","severity":1,"message":"748","line":12,"column":8,"nodeType":"702","messageId":"703","endLine":12,"endColumn":23},{"ruleId":"700","severity":1,"message":"746","line":117,"column":9,"nodeType":"702","messageId":"703","endLine":117,"endColumn":25},{"ruleId":"700","severity":1,"message":"749","line":12,"column":8,"nodeType":"702","messageId":"703","endLine":12,"endColumn":20},{"ruleId":"700","severity":1,"message":"747","line":13,"column":8,"nodeType":"702","messageId":"703","endLine":13,"endColumn":22},{"ruleId":"700","severity":1,"message":"748","line":14,"column":8,"nodeType":"702","messageId":"703","endLine":14,"endColumn":23},{"ruleId":"700","severity":1,"message":"734","line":15,"column":8,"nodeType":"702","messageId":"703","endLine":15,"endColumn":13},{"ruleId":"700","severity":1,"message":"740","line":19,"column":8,"nodeType":"702","messageId":"703","endLine":19,"endColumn":16},{"ruleId":"700","severity":1,"message":"708","line":21,"column":10,"nodeType":"702","messageId":"703","endLine":21,"endColumn":14},{"ruleId":"700","severity":1,"message":"750","line":219,"column":10,"nodeType":"702","messageId":"703","endLine":219,"endColumn":21},{"ruleId":"700","severity":1,"message":"751","line":244,"column":9,"nodeType":"702","messageId":"703","endLine":244,"endColumn":21},{"ruleId":"700","severity":1,"message":"752","line":289,"column":9,"nodeType":"702","messageId":"703","endLine":289,"endColumn":18},{"ruleId":"700","severity":1,"message":"734","line":15,"column":8,"nodeType":"702","messageId":"703","endLine":15,"endColumn":13},{"ruleId":"700","severity":1,"message":"753","line":20,"column":35,"nodeType":"702","messageId":"703","endLine":20,"endColumn":43},{"ruleId":"700","severity":1,"message":"734","line":15,"column":8,"nodeType":"702","messageId":"703","endLine":15,"endColumn":13},{"ruleId":"700","severity":1,"message":"753","line":23,"column":3,"nodeType":"702","messageId":"703","endLine":23,"endColumn":11},{"ruleId":"700","severity":1,"message":"754","line":2,"column":10,"nodeType":"702","messageId":"703","endLine":2,"endColumn":21},{"ruleId":"700","severity":1,"message":"746","line":116,"column":9,"nodeType":"702","messageId":"703","endLine":116,"endColumn":25},{"ruleId":"700","severity":1,"message":"755","line":8,"column":8,"nodeType":"702","messageId":"703","endLine":8,"endColumn":18},{"ruleId":"700","severity":1,"message":"756","line":9,"column":8,"nodeType":"702","messageId":"703","endLine":9,"endColumn":19},{"ruleId":"700","severity":1,"message":"744","line":48,"column":9,"nodeType":"702","messageId":"703","endLine":48,"endColumn":16},{"ruleId":"700","severity":1,"message":"709","line":51,"column":10,"nodeType":"702","messageId":"703","endLine":51,"endColumn":22},{"ruleId":"712","severity":1,"message":"757","line":94,"column":6,"nodeType":"714","endLine":94,"endColumn":19,"suggestions":"758"},{"ruleId":"700","severity":1,"message":"759","line":23,"column":9,"nodeType":"702","messageId":"703","endLine":23,"endColumn":18},{"ruleId":"700","severity":1,"message":"760","line":26,"column":22,"nodeType":"702","messageId":"703","endLine":26,"endColumn":31},{"ruleId":"700","severity":1,"message":"761","line":315,"column":10,"nodeType":"702","messageId":"703","endLine":315,"endColumn":26},{"ruleId":"700","severity":1,"message":"762","line":315,"column":28,"nodeType":"702","messageId":"703","endLine":315,"endColumn":47},{"ruleId":"712","severity":1,"message":"763","line":330,"column":6,"nodeType":"714","endLine":330,"endColumn":8,"suggestions":"764"},{"ruleId":"700","severity":1,"message":"754","line":2,"column":10,"nodeType":"702","messageId":"703","endLine":2,"endColumn":21},{"ruleId":"700","severity":1,"message":"746","line":116,"column":9,"nodeType":"702","messageId":"703","endLine":116,"endColumn":25},{"ruleId":"700","severity":1,"message":"765","line":10,"column":8,"nodeType":"702","messageId":"703","endLine":10,"endColumn":13},{"ruleId":"700","severity":1,"message":"766","line":14,"column":8,"nodeType":"702","messageId":"703","endLine":14,"endColumn":25},{"ruleId":"700","severity":1,"message":"760","line":25,"column":22,"nodeType":"702","messageId":"703","endLine":25,"endColumn":31},{"ruleId":"700","severity":1,"message":"761","line":318,"column":10,"nodeType":"702","messageId":"703","endLine":318,"endColumn":26},{"ruleId":"700","severity":1,"message":"762","line":318,"column":28,"nodeType":"702","messageId":"703","endLine":318,"endColumn":47},{"ruleId":"712","severity":1,"message":"763","line":333,"column":6,"nodeType":"714","endLine":333,"endColumn":8,"suggestions":"767"},{"ruleId":"700","severity":1,"message":"716","line":1,"column":28,"nodeType":"702","messageId":"703","endLine":1,"endColumn":36},{"ruleId":"700","severity":1,"message":"738","line":19,"column":8,"nodeType":"702","messageId":"703","endLine":19,"endColumn":18},{"ruleId":"700","severity":1,"message":"739","line":20,"column":8,"nodeType":"702","messageId":"703","endLine":20,"endColumn":18},{"ruleId":"700","severity":1,"message":"740","line":21,"column":8,"nodeType":"702","messageId":"703","endLine":21,"endColumn":16},{"ruleId":"700","severity":1,"message":"742","line":24,"column":24,"nodeType":"702","messageId":"703","endLine":24,"endColumn":40},{"ruleId":"700","severity":1,"message":"708","line":25,"column":22,"nodeType":"702","messageId":"703","endLine":25,"endColumn":26},{"ruleId":"700","severity":1,"message":"743","line":25,"column":28,"nodeType":"702","messageId":"703","endLine":25,"endColumn":36},{"ruleId":"700","severity":1,"message":"768","line":308,"column":9,"nodeType":"702","messageId":"703","endLine":308,"endColumn":27},{"ruleId":"700","severity":1,"message":"765","line":10,"column":8,"nodeType":"702","messageId":"703","endLine":10,"endColumn":13},{"ruleId":"700","severity":1,"message":"766","line":14,"column":8,"nodeType":"702","messageId":"703","endLine":14,"endColumn":25},{"ruleId":"700","severity":1,"message":"765","line":10,"column":8,"nodeType":"702","messageId":"703","endLine":10,"endColumn":13},{"ruleId":"700","severity":1,"message":"766","line":14,"column":8,"nodeType":"702","messageId":"703","endLine":14,"endColumn":25},{"ruleId":"700","severity":1,"message":"709","line":16,"column":12,"nodeType":"702","messageId":"703","endLine":16,"endColumn":24},{"ruleId":"700","severity":1,"message":"769","line":17,"column":12,"nodeType":"702","messageId":"703","endLine":17,"endColumn":22},{"ruleId":"700","severity":1,"message":"710","line":17,"column":24,"nodeType":"702","messageId":"703","endLine":17,"endColumn":37},{"ruleId":"700","severity":1,"message":"770","line":19,"column":12,"nodeType":"702","messageId":"703","endLine":19,"endColumn":26},{"ruleId":"700","severity":1,"message":"711","line":19,"column":28,"nodeType":"702","messageId":"703","endLine":19,"endColumn":45},{"ruleId":"712","severity":1,"message":"771","line":72,"column":6,"nodeType":"714","endLine":72,"endColumn":19,"suggestions":"772"},{"ruleId":"700","severity":1,"message":"709","line":17,"column":12,"nodeType":"702","messageId":"703","endLine":17,"endColumn":24},{"ruleId":"700","severity":1,"message":"769","line":18,"column":12,"nodeType":"702","messageId":"703","endLine":18,"endColumn":22},{"ruleId":"700","severity":1,"message":"710","line":18,"column":24,"nodeType":"702","messageId":"703","endLine":18,"endColumn":37},{"ruleId":"700","severity":1,"message":"770","line":20,"column":12,"nodeType":"702","messageId":"703","endLine":20,"endColumn":26},{"ruleId":"700","severity":1,"message":"711","line":20,"column":28,"nodeType":"702","messageId":"703","endLine":20,"endColumn":45},{"ruleId":"712","severity":1,"message":"773","line":74,"column":6,"nodeType":"714","endLine":74,"endColumn":19,"suggestions":"774"},{"ruleId":"735","severity":1,"message":"736","line":173,"column":21,"nodeType":"737","endLine":173,"endColumn":32},{"ruleId":"700","severity":1,"message":"738","line":19,"column":8,"nodeType":"702","messageId":"703","endLine":19,"endColumn":18},{"ruleId":"700","severity":1,"message":"739","line":20,"column":8,"nodeType":"702","messageId":"703","endLine":20,"endColumn":18},{"ruleId":"700","severity":1,"message":"740","line":21,"column":8,"nodeType":"702","messageId":"703","endLine":21,"endColumn":16},{"ruleId":"700","severity":1,"message":"708","line":22,"column":10,"nodeType":"702","messageId":"703","endLine":22,"endColumn":14},{"ruleId":"700","severity":1,"message":"743","line":22,"column":16,"nodeType":"702","messageId":"703","endLine":22,"endColumn":24},{"ruleId":"700","severity":1,"message":"760","line":26,"column":22,"nodeType":"702","messageId":"703","endLine":26,"endColumn":31},{"ruleId":"700","severity":1,"message":"744","line":298,"column":9,"nodeType":"702","messageId":"703","endLine":298,"endColumn":16},{"ruleId":"700","severity":1,"message":"761","line":308,"column":10,"nodeType":"702","messageId":"703","endLine":308,"endColumn":26},{"ruleId":"700","severity":1,"message":"762","line":308,"column":28,"nodeType":"702","messageId":"703","endLine":308,"endColumn":47},{"ruleId":"712","severity":1,"message":"763","line":323,"column":6,"nodeType":"714","endLine":323,"endColumn":8,"suggestions":"775"},{"ruleId":"696","replacedBy":"776"},{"ruleId":"698","replacedBy":"777"},{"ruleId":"700","severity":1,"message":"725","line":9,"column":8,"nodeType":"702","messageId":"703","endLine":9,"endColumn":12},{"ruleId":"700","severity":1,"message":"726","line":14,"column":8,"nodeType":"702","messageId":"703","endLine":14,"endColumn":19},{"ruleId":"700","severity":1,"message":"727","line":16,"column":8,"nodeType":"702","messageId":"703","endLine":16,"endColumn":23},{"ruleId":"700","severity":1,"message":"728","line":25,"column":10,"nodeType":"702","messageId":"703","endLine":25,"endColumn":22},{"ruleId":"700","severity":1,"message":"729","line":26,"column":9,"nodeType":"702","messageId":"703","endLine":26,"endColumn":22},{"ruleId":"700","severity":1,"message":"754","line":2,"column":10,"nodeType":"702","messageId":"703","endLine":2,"endColumn":21},{"ruleId":"700","severity":1,"message":"746","line":116,"column":9,"nodeType":"702","messageId":"703","endLine":116,"endColumn":25},{"ruleId":"700","severity":1,"message":"765","line":10,"column":8,"nodeType":"702","messageId":"703","endLine":10,"endColumn":13},{"ruleId":"700","severity":1,"message":"766","line":14,"column":8,"nodeType":"702","messageId":"703","endLine":14,"endColumn":25},{"ruleId":"700","severity":1,"message":"746","line":118,"column":9,"nodeType":"702","messageId":"703","endLine":118,"endColumn":25},{"ruleId":"700","severity":1,"message":"746","line":114,"column":9,"nodeType":"702","messageId":"703","endLine":114,"endColumn":25},{"ruleId":"700","severity":1,"message":"734","line":15,"column":8,"nodeType":"702","messageId":"703","endLine":15,"endColumn":13},{"ruleId":"700","severity":1,"message":"753","line":23,"column":3,"nodeType":"702","messageId":"703","endLine":23,"endColumn":11},{"ruleId":"700","severity":1,"message":"734","line":15,"column":8,"nodeType":"702","messageId":"703","endLine":15,"endColumn":13},{"ruleId":"700","severity":1,"message":"753","line":20,"column":35,"nodeType":"702","messageId":"703","endLine":20,"endColumn":43},{"ruleId":"700","severity":1,"message":"754","line":2,"column":10,"nodeType":"702","messageId":"703","endLine":2,"endColumn":21},{"ruleId":"700","severity":1,"message":"746","line":116,"column":9,"nodeType":"702","messageId":"703","endLine":116,"endColumn":25},{"ruleId":"700","severity":1,"message":"765","line":10,"column":8,"nodeType":"702","messageId":"703","endLine":10,"endColumn":13},{"ruleId":"700","severity":1,"message":"766","line":14,"column":8,"nodeType":"702","messageId":"703","endLine":14,"endColumn":25},{"ruleId":"700","severity":1,"message":"705","line":120,"column":9,"nodeType":"702","messageId":"703","endLine":120,"endColumn":16},{"ruleId":"700","severity":1,"message":"706","line":122,"column":20,"nodeType":"702","messageId":"703","endLine":122,"endColumn":31},{"ruleId":"700","severity":1,"message":"707","line":123,"column":9,"nodeType":"702","messageId":"703","endLine":123,"endColumn":13},{"ruleId":"700","severity":1,"message":"765","line":10,"column":8,"nodeType":"702","messageId":"703","endLine":10,"endColumn":13},{"ruleId":"700","severity":1,"message":"766","line":14,"column":8,"nodeType":"702","messageId":"703","endLine":14,"endColumn":25},{"ruleId":"700","severity":1,"message":"759","line":23,"column":9,"nodeType":"702","messageId":"703","endLine":23,"endColumn":18},{"ruleId":"700","severity":1,"message":"760","line":26,"column":22,"nodeType":"702","messageId":"703","endLine":26,"endColumn":31},{"ruleId":"712","severity":1,"message":"763","line":348,"column":6,"nodeType":"714","endLine":348,"endColumn":8,"suggestions":"778"},{"ruleId":"700","severity":1,"message":"755","line":8,"column":8,"nodeType":"702","messageId":"703","endLine":8,"endColumn":18},{"ruleId":"700","severity":1,"message":"756","line":9,"column":8,"nodeType":"702","messageId":"703","endLine":9,"endColumn":19},{"ruleId":"700","severity":1,"message":"744","line":48,"column":9,"nodeType":"702","messageId":"703","endLine":48,"endColumn":16},{"ruleId":"700","severity":1,"message":"709","line":51,"column":10,"nodeType":"702","messageId":"703","endLine":51,"endColumn":22},{"ruleId":"712","severity":1,"message":"757","line":94,"column":6,"nodeType":"714","endLine":94,"endColumn":19,"suggestions":"779"},{"ruleId":"700","severity":1,"message":"716","line":1,"column":28,"nodeType":"702","messageId":"703","endLine":1,"endColumn":36},{"ruleId":"700","severity":1,"message":"738","line":19,"column":8,"nodeType":"702","messageId":"703","endLine":19,"endColumn":18},{"ruleId":"700","severity":1,"message":"739","line":20,"column":8,"nodeType":"702","messageId":"703","endLine":20,"endColumn":18},{"ruleId":"700","severity":1,"message":"740","line":21,"column":8,"nodeType":"702","messageId":"703","endLine":21,"endColumn":16},{"ruleId":"700","severity":1,"message":"741","line":24,"column":11,"nodeType":"702","messageId":"703","endLine":24,"endColumn":22},{"ruleId":"700","severity":1,"message":"742","line":24,"column":24,"nodeType":"702","messageId":"703","endLine":24,"endColumn":40},{"ruleId":"700","severity":1,"message":"708","line":25,"column":22,"nodeType":"702","messageId":"703","endLine":25,"endColumn":26},{"ruleId":"700","severity":1,"message":"743","line":25,"column":28,"nodeType":"702","messageId":"703","endLine":25,"endColumn":36},{"ruleId":"700","severity":1,"message":"744","line":307,"column":9,"nodeType":"702","messageId":"703","endLine":307,"endColumn":16},{"ruleId":"700","severity":1,"message":"745","line":308,"column":17,"nodeType":"702","messageId":"703","endLine":308,"endColumn":28},{"ruleId":"700","severity":1,"message":"709","line":17,"column":12,"nodeType":"702","messageId":"703","endLine":17,"endColumn":24},{"ruleId":"700","severity":1,"message":"769","line":18,"column":12,"nodeType":"702","messageId":"703","endLine":18,"endColumn":22},{"ruleId":"700","severity":1,"message":"710","line":18,"column":24,"nodeType":"702","messageId":"703","endLine":18,"endColumn":37},{"ruleId":"700","severity":1,"message":"770","line":22,"column":12,"nodeType":"702","messageId":"703","endLine":22,"endColumn":26},{"ruleId":"700","severity":1,"message":"711","line":22,"column":28,"nodeType":"702","messageId":"703","endLine":22,"endColumn":45},{"ruleId":"712","severity":1,"message":"771","line":91,"column":6,"nodeType":"714","endLine":91,"endColumn":19,"suggestions":"780"},{"ruleId":"700","severity":1,"message":"709","line":17,"column":12,"nodeType":"702","messageId":"703","endLine":17,"endColumn":24},{"ruleId":"700","severity":1,"message":"769","line":18,"column":12,"nodeType":"702","messageId":"703","endLine":18,"endColumn":22},{"ruleId":"700","severity":1,"message":"710","line":18,"column":24,"nodeType":"702","messageId":"703","endLine":18,"endColumn":37},{"ruleId":"700","severity":1,"message":"770","line":23,"column":12,"nodeType":"702","messageId":"703","endLine":23,"endColumn":26},{"ruleId":"700","severity":1,"message":"711","line":23,"column":28,"nodeType":"702","messageId":"703","endLine":23,"endColumn":45},{"ruleId":"712","severity":1,"message":"773","line":94,"column":6,"nodeType":"714","endLine":94,"endColumn":19,"suggestions":"781"},{"ruleId":"735","severity":1,"message":"736","line":227,"column":21,"nodeType":"737","endLine":227,"endColumn":32},{"ruleId":"700","severity":1,"message":"747","line":13,"column":8,"nodeType":"702","messageId":"703","endLine":13,"endColumn":22},{"ruleId":"700","severity":1,"message":"748","line":14,"column":8,"nodeType":"702","messageId":"703","endLine":14,"endColumn":23},{"ruleId":"717","severity":1,"message":"718","line":13,"column":1,"nodeType":"719","endLine":38,"endColumn":2},{"ruleId":"717","severity":1,"message":"718","line":5,"column":1,"nodeType":"719","endLine":18,"endColumn":2},{"ruleId":"717","severity":1,"message":"722","line":25,"column":1,"nodeType":"719","endLine":28,"endColumn":3},{"ruleId":"700","severity":1,"message":"747","line":11,"column":8,"nodeType":"702","messageId":"703","endLine":11,"endColumn":22},{"ruleId":"700","severity":1,"message":"748","line":12,"column":8,"nodeType":"702","messageId":"703","endLine":12,"endColumn":23},{"ruleId":"700","severity":1,"message":"730","line":7,"column":8,"nodeType":"702","messageId":"703","endLine":7,"endColumn":17},{"ruleId":"700","severity":1,"message":"731","line":8,"column":8,"nodeType":"702","messageId":"703","endLine":8,"endColumn":12},{"ruleId":"700","severity":1,"message":"732","line":9,"column":8,"nodeType":"702","messageId":"703","endLine":9,"endColumn":18},{"ruleId":"700","severity":1,"message":"733","line":10,"column":10,"nodeType":"702","messageId":"703","endLine":10,"endColumn":20},{"ruleId":"700","severity":1,"message":"734","line":12,"column":8,"nodeType":"702","messageId":"703","endLine":12,"endColumn":13},{"ruleId":"735","severity":1,"message":"736","line":285,"column":21,"nodeType":"737","endLine":285,"endColumn":38},{"ruleId":"700","severity":1,"message":"738","line":19,"column":8,"nodeType":"702","messageId":"703","endLine":19,"endColumn":18},{"ruleId":"700","severity":1,"message":"739","line":20,"column":8,"nodeType":"702","messageId":"703","endLine":20,"endColumn":18},{"ruleId":"700","severity":1,"message":"740","line":21,"column":8,"nodeType":"702","messageId":"703","endLine":21,"endColumn":16},{"ruleId":"700","severity":1,"message":"708","line":22,"column":10,"nodeType":"702","messageId":"703","endLine":22,"endColumn":14},{"ruleId":"700","severity":1,"message":"743","line":22,"column":16,"nodeType":"702","messageId":"703","endLine":22,"endColumn":24},{"ruleId":"700","severity":1,"message":"760","line":27,"column":22,"nodeType":"702","messageId":"703","endLine":27,"endColumn":31},{"ruleId":"700","severity":1,"message":"744","line":311,"column":9,"nodeType":"702","messageId":"703","endLine":311,"endColumn":16},{"ruleId":"712","severity":1,"message":"763","line":339,"column":6,"nodeType":"714","endLine":339,"endColumn":8,"suggestions":"782"},{"ruleId":"700","severity":1,"message":"734","line":15,"column":8,"nodeType":"702","messageId":"703","endLine":15,"endColumn":13},{"ruleId":"700","severity":1,"message":"740","line":19,"column":8,"nodeType":"702","messageId":"703","endLine":19,"endColumn":16},{"ruleId":"700","severity":1,"message":"708","line":21,"column":10,"nodeType":"702","messageId":"703","endLine":21,"endColumn":14},{"ruleId":"700","severity":1,"message":"750","line":219,"column":10,"nodeType":"702","messageId":"703","endLine":219,"endColumn":21},{"ruleId":"700","severity":1,"message":"751","line":244,"column":9,"nodeType":"702","messageId":"703","endLine":244,"endColumn":21},{"ruleId":"700","severity":1,"message":"752","line":289,"column":9,"nodeType":"702","messageId":"703","endLine":289,"endColumn":18},{"ruleId":"700","severity":1,"message":"760","line":26,"column":22,"nodeType":"702","messageId":"703","endLine":26,"endColumn":31},{"ruleId":"712","severity":1,"message":"763","line":363,"column":6,"nodeType":"714","endLine":363,"endColumn":8,"suggestions":"783"},{"ruleId":"700","severity":1,"message":"716","line":1,"column":28,"nodeType":"702","messageId":"703","endLine":1,"endColumn":36},{"ruleId":"700","severity":1,"message":"734","line":15,"column":8,"nodeType":"702","messageId":"703","endLine":15,"endColumn":13},{"ruleId":"700","severity":1,"message":"740","line":20,"column":8,"nodeType":"702","messageId":"703","endLine":20,"endColumn":16},{"ruleId":"700","severity":1,"message":"708","line":27,"column":22,"nodeType":"702","messageId":"703","endLine":27,"endColumn":26},{"ruleId":"784","severity":2,"message":"785","line":6,"column":37,"nodeType":"702","messageId":"786","endLine":6,"endColumn":45},{"ruleId":"700","severity":1,"message":"787","line":7,"column":10,"nodeType":"702","messageId":"703","endLine":7,"endColumn":24},{"ruleId":"700","severity":1,"message":"788","line":7,"column":26,"nodeType":"702","messageId":"703","endLine":7,"endColumn":43},{"ruleId":"784","severity":2,"message":"785","line":7,"column":47,"nodeType":"702","messageId":"786","endLine":7,"endColumn":55},{"ruleId":"700","severity":1,"message":"789","line":8,"column":10,"nodeType":"702","messageId":"703","endLine":8,"endColumn":21},{"ruleId":"700","severity":1,"message":"790","line":8,"column":23,"nodeType":"702","messageId":"703","endLine":8,"endColumn":37},{"ruleId":"784","severity":2,"message":"785","line":8,"column":41,"nodeType":"702","messageId":"786","endLine":8,"endColumn":49},{"ruleId":"700","severity":1,"message":"716","line":1,"column":18,"nodeType":"702","messageId":"703","endLine":1,"endColumn":26},{"ruleId":"700","severity":1,"message":"791","line":2,"column":9,"nodeType":"702","messageId":"703","endLine":2,"endColumn":12},{"ruleId":"700","severity":1,"message":"792","line":2,"column":19,"nodeType":"702","messageId":"703","endLine":2,"endColumn":23},{"ruleId":"700","severity":1,"message":"793","line":7,"column":8,"nodeType":"702","messageId":"703","endLine":7,"endColumn":13},{"ruleId":"712","severity":1,"message":"763","line":34,"column":6,"nodeType":"714","endLine":34,"endColumn":8,"suggestions":"794"},{"ruleId":"700","severity":1,"message":"716","line":1,"column":18,"nodeType":"702","messageId":"703","endLine":1,"endColumn":26},{"ruleId":"700","severity":1,"message":"791","line":2,"column":9,"nodeType":"702","messageId":"703","endLine":2,"endColumn":12},{"ruleId":"700","severity":1,"message":"792","line":2,"column":19,"nodeType":"702","messageId":"703","endLine":2,"endColumn":23},{"ruleId":"700","severity":1,"message":"793","line":7,"column":8,"nodeType":"702","messageId":"703","endLine":7,"endColumn":13},{"ruleId":"700","severity":1,"message":"795","line":10,"column":12,"nodeType":"702","messageId":"703","endLine":10,"endColumn":17},{"ruleId":"700","severity":1,"message":"761","line":11,"column":12,"nodeType":"702","messageId":"703","endLine":11,"endColumn":28},{"ruleId":"700","severity":1,"message":"796","line":17,"column":12,"nodeType":"702","messageId":"703","endLine":17,"endColumn":16},{"ruleId":"712","severity":1,"message":"763","line":81,"column":8,"nodeType":"714","endLine":81,"endColumn":10,"suggestions":"797"},"no-native-reassign",["798"],"no-negated-in-lhs",["799"],"no-unused-vars","'isLoggedIn' is assigned a value but never used.","Identifier","unusedVar","'getProducts' is defined but never used.","'classes' is assigned a value but never used.","'setAnchorEl' is assigned a value but never used.","'open' is assigned a value but never used.","'Link' is defined but never used.","'showEditForm' is assigned a value but never used.","'setErrMessage' is assigned a value but never used.","'setSuccessMessage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getProductFields'. Either include it or remove the dependency array.","ArrayExpression",["800"],"'useState' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration",["798"],["799"],"Assign object to a variable before exporting as module default",["798"],["799"],"'Home' is defined but never used.","'AssetsTable' is defined but never used.","'AdminsEditAsset' is defined but never used.","'filterChange' is assigned a value but never used.","'filterRequest' is assigned a value but never used.","'TextField' is defined but never used.","'Grid' is defined but never used.","'Typography' is defined but never used.","'makeStyles' is defined but never used.","'Paper' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'IconButton' is defined but never used.","'DeleteIcon' is defined but never used.","'EditIcon' is defined but never used.","'deleteAsset' is defined but never used.","'getManagerAssets' is defined but never used.","'Redirect' is defined but never used.","'history' is assigned a value but never used.","'currentUser' is assigned a value but never used.","'fixedHeightPaper' is assigned a value but never used.","'AssignmentIcon' is defined but never used.","'CheckCircleIcon' is defined but never used.","'CategoryIcon' is defined but never used.","'roleDetails' is assigned a value but never used.","'handleDelete' is assigned a value but never used.","'emptyRows' is assigned a value but never used.","'editUser' is defined but never used.","'useLocation' is defined but never used.","'InputLabel' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has a missing dependency: 'getUserFields'. Either include it or remove the dependency array.",["801"],"'getAssets' is defined but never used.","'useParams' is defined but never used.","'searchCategories' is assigned a value but never used.","'setSearchCategories' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAssetsList'. Either include it or remove the dependency array.",["802"],"'Badge' is defined but never used.","'NotificationsIcon' is defined but never used.",["803"],"'handleDeleteSubmit' is assigned a value but never used.","'errMessage' is assigned a value but never used.","'successMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'assetDetails' and 'getAssetFields'. Either include them or remove the dependency array.",["804"],"React Hook useEffect has a missing dependency: 'getAssetFields'. Either include it or remove the dependency array.",["805"],["806"],["798"],["799"],["807"],["808"],["809"],["810"],["811"],["812"],"no-undef","'useState' is not defined.","undef","'employeeSalary' is assigned a value but never used.","'setEmployeeSalary' is assigned a value but never used.","'employeeAge' is assigned a value but never used.","'setEmployeeAge' is assigned a value but never used.","'Pie' is defined but never used.","'Line' is defined but never used.","'Chart' is defined but never used.",["813"],"'asset' is assigned a value but never used.","'user' is assigned a value but never used.",["814"],"no-global-assign","no-unsafe-negation",{"desc":"815","fix":"816"},{"desc":"817","fix":"818"},{"desc":"819","fix":"820"},{"desc":"819","fix":"821"},{"desc":"822","fix":"823"},{"desc":"824","fix":"825"},{"desc":"819","fix":"826"},{"desc":"819","fix":"827"},{"desc":"817","fix":"828"},{"desc":"822","fix":"829"},{"desc":"824","fix":"830"},{"desc":"819","fix":"831"},{"desc":"819","fix":"832"},{"desc":"819","fix":"833"},{"desc":"819","fix":"834"},"Update the dependencies array to be: [currentUser, getProductFields]",{"range":"835","text":"836"},"Update the dependencies array to be: [currentUser, getUserFields]",{"range":"837","text":"838"},"Update the dependencies array to be: [getAssetsList]",{"range":"839","text":"840"},{"range":"841","text":"840"},"Update the dependencies array to be: [assetDetails, currentUser, getAssetFields]",{"range":"842","text":"843"},"Update the dependencies array to be: [currentUser, getAssetFields]",{"range":"844","text":"845"},{"range":"846","text":"840"},{"range":"847","text":"840"},{"range":"848","text":"838"},{"range":"849","text":"843"},{"range":"850","text":"845"},{"range":"851","text":"840"},{"range":"852","text":"840"},{"range":"853","text":"840"},{"range":"854","text":"840"},[2432,2445],"[currentUser, getProductFields]",[3059,3072],"[currentUser, getUserFields]",[8552,8554],"[getAssetsList]",[8560,8562],[2612,2625],"[assetDetails, currentUser, getAssetFields]",[2634,2647],"[currentUser, getAssetFields]",[8296,8298],[8978,8980],[3059,3072],[3289,3302],[3320,3333],[8717,8719],[9358,9360],[1071,1073],[3012,3014]]